/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ThriftGenerate;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Methods {

  public interface Iface {

    public String createVertex(Vertex v) throws org.apache.thrift.TException;

    public String readVertex(int idEdge) throws org.apache.thrift.TException;

    public String deleteVertex(int idVertex) throws org.apache.thrift.TException;

    public String showBase() throws org.apache.thrift.TException;

    public double menorDistancia(List<Edge> listaArestas, int tamanho, int tag1, int tag2, List<Vertex> array) throws org.apache.thrift.TException;

    public Vertex ReadVertexObject(int idEdge) throws org.apache.thrift.TException;

    public String createEdge(Edge a) throws org.apache.thrift.TException;

    public String readEdge(int idEdge) throws org.apache.thrift.TException;

    public String deleteEdge(int idEdge) throws org.apache.thrift.TException;

    public String updateVertex(int idVertex, String color, String description) throws org.apache.thrift.TException;

    public String updateEdge(int idEdge, String nameEdge, String description, double peso) throws org.apache.thrift.TException;

    public String listVertexForEdge(int idEdge) throws org.apache.thrift.TException;

    public String listEdgeForVertex(int idVertex) throws org.apache.thrift.TException;

    public String listVertexForVertex(int idVertex) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void createVertex(Vertex v, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void readVertex(int idEdge, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteVertex(int idVertex, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void showBase(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void menorDistancia(List<Edge> listaArestas, int tamanho, int tag1, int tag2, List<Vertex> array, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void ReadVertexObject(int idEdge, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void createEdge(Edge a, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void readEdge(int idEdge, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteEdge(int idEdge, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateVertex(int idVertex, String color, String description, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateEdge(int idEdge, String nameEdge, String description, double peso, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void listVertexForEdge(int idEdge, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void listEdgeForVertex(int idVertex, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void listVertexForVertex(int idVertex, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String createVertex(Vertex v) throws org.apache.thrift.TException
    {
      send_createVertex(v);
      return recv_createVertex();
    }

    public void send_createVertex(Vertex v) throws org.apache.thrift.TException
    {
      createVertex_args args = new createVertex_args();
      args.setV(v);
      sendBase("createVertex", args);
    }

    public String recv_createVertex() throws org.apache.thrift.TException
    {
      createVertex_result result = new createVertex_result();
      receiveBase(result, "createVertex");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createVertex failed: unknown result");
    }

    public String readVertex(int idEdge) throws org.apache.thrift.TException
    {
      send_readVertex(idEdge);
      return recv_readVertex();
    }

    public void send_readVertex(int idEdge) throws org.apache.thrift.TException
    {
      readVertex_args args = new readVertex_args();
      args.setIdEdge(idEdge);
      sendBase("readVertex", args);
    }

    public String recv_readVertex() throws org.apache.thrift.TException
    {
      readVertex_result result = new readVertex_result();
      receiveBase(result, "readVertex");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "readVertex failed: unknown result");
    }

    public String deleteVertex(int idVertex) throws org.apache.thrift.TException
    {
      send_deleteVertex(idVertex);
      return recv_deleteVertex();
    }

    public void send_deleteVertex(int idVertex) throws org.apache.thrift.TException
    {
      deleteVertex_args args = new deleteVertex_args();
      args.setIdVertex(idVertex);
      sendBase("deleteVertex", args);
    }

    public String recv_deleteVertex() throws org.apache.thrift.TException
    {
      deleteVertex_result result = new deleteVertex_result();
      receiveBase(result, "deleteVertex");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteVertex failed: unknown result");
    }

    public String showBase() throws org.apache.thrift.TException
    {
      send_showBase();
      return recv_showBase();
    }

    public void send_showBase() throws org.apache.thrift.TException
    {
      showBase_args args = new showBase_args();
      sendBase("showBase", args);
    }

    public String recv_showBase() throws org.apache.thrift.TException
    {
      showBase_result result = new showBase_result();
      receiveBase(result, "showBase");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "showBase failed: unknown result");
    }

    public double menorDistancia(List<Edge> listaArestas, int tamanho, int tag1, int tag2, List<Vertex> array) throws org.apache.thrift.TException
    {
      send_menorDistancia(listaArestas, tamanho, tag1, tag2, array);
      return recv_menorDistancia();
    }

    public void send_menorDistancia(List<Edge> listaArestas, int tamanho, int tag1, int tag2, List<Vertex> array) throws org.apache.thrift.TException
    {
      menorDistancia_args args = new menorDistancia_args();
      args.setListaArestas(listaArestas);
      args.setTamanho(tamanho);
      args.setTag1(tag1);
      args.setTag2(tag2);
      args.setArray(array);
      sendBase("menorDistancia", args);
    }

    public double recv_menorDistancia() throws org.apache.thrift.TException
    {
      menorDistancia_result result = new menorDistancia_result();
      receiveBase(result, "menorDistancia");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "menorDistancia failed: unknown result");
    }

    public Vertex ReadVertexObject(int idEdge) throws org.apache.thrift.TException
    {
      send_ReadVertexObject(idEdge);
      return recv_ReadVertexObject();
    }

    public void send_ReadVertexObject(int idEdge) throws org.apache.thrift.TException
    {
      ReadVertexObject_args args = new ReadVertexObject_args();
      args.setIdEdge(idEdge);
      sendBase("ReadVertexObject", args);
    }

    public Vertex recv_ReadVertexObject() throws org.apache.thrift.TException
    {
      ReadVertexObject_result result = new ReadVertexObject_result();
      receiveBase(result, "ReadVertexObject");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ReadVertexObject failed: unknown result");
    }

    public String createEdge(Edge a) throws org.apache.thrift.TException
    {
      send_createEdge(a);
      return recv_createEdge();
    }

    public void send_createEdge(Edge a) throws org.apache.thrift.TException
    {
      createEdge_args args = new createEdge_args();
      args.setA(a);
      sendBase("createEdge", args);
    }

    public String recv_createEdge() throws org.apache.thrift.TException
    {
      createEdge_result result = new createEdge_result();
      receiveBase(result, "createEdge");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createEdge failed: unknown result");
    }

    public String readEdge(int idEdge) throws org.apache.thrift.TException
    {
      send_readEdge(idEdge);
      return recv_readEdge();
    }

    public void send_readEdge(int idEdge) throws org.apache.thrift.TException
    {
      readEdge_args args = new readEdge_args();
      args.setIdEdge(idEdge);
      sendBase("readEdge", args);
    }

    public String recv_readEdge() throws org.apache.thrift.TException
    {
      readEdge_result result = new readEdge_result();
      receiveBase(result, "readEdge");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "readEdge failed: unknown result");
    }

    public String deleteEdge(int idEdge) throws org.apache.thrift.TException
    {
      send_deleteEdge(idEdge);
      return recv_deleteEdge();
    }

    public void send_deleteEdge(int idEdge) throws org.apache.thrift.TException
    {
      deleteEdge_args args = new deleteEdge_args();
      args.setIdEdge(idEdge);
      sendBase("deleteEdge", args);
    }

    public String recv_deleteEdge() throws org.apache.thrift.TException
    {
      deleteEdge_result result = new deleteEdge_result();
      receiveBase(result, "deleteEdge");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteEdge failed: unknown result");
    }

    public String updateVertex(int idVertex, String color, String description) throws org.apache.thrift.TException
    {
      send_updateVertex(idVertex, color, description);
      return recv_updateVertex();
    }

    public void send_updateVertex(int idVertex, String color, String description) throws org.apache.thrift.TException
    {
      updateVertex_args args = new updateVertex_args();
      args.setIdVertex(idVertex);
      args.setColor(color);
      args.setDescription(description);
      sendBase("updateVertex", args);
    }

    public String recv_updateVertex() throws org.apache.thrift.TException
    {
      updateVertex_result result = new updateVertex_result();
      receiveBase(result, "updateVertex");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateVertex failed: unknown result");
    }

    public String updateEdge(int idEdge, String nameEdge, String description, double peso) throws org.apache.thrift.TException
    {
      send_updateEdge(idEdge, nameEdge, description, peso);
      return recv_updateEdge();
    }

    public void send_updateEdge(int idEdge, String nameEdge, String description, double peso) throws org.apache.thrift.TException
    {
      updateEdge_args args = new updateEdge_args();
      args.setIdEdge(idEdge);
      args.setNameEdge(nameEdge);
      args.setDescription(description);
      args.setPeso(peso);
      sendBase("updateEdge", args);
    }

    public String recv_updateEdge() throws org.apache.thrift.TException
    {
      updateEdge_result result = new updateEdge_result();
      receiveBase(result, "updateEdge");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateEdge failed: unknown result");
    }

    public String listVertexForEdge(int idEdge) throws org.apache.thrift.TException
    {
      send_listVertexForEdge(idEdge);
      return recv_listVertexForEdge();
    }

    public void send_listVertexForEdge(int idEdge) throws org.apache.thrift.TException
    {
      listVertexForEdge_args args = new listVertexForEdge_args();
      args.setIdEdge(idEdge);
      sendBase("listVertexForEdge", args);
    }

    public String recv_listVertexForEdge() throws org.apache.thrift.TException
    {
      listVertexForEdge_result result = new listVertexForEdge_result();
      receiveBase(result, "listVertexForEdge");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listVertexForEdge failed: unknown result");
    }

    public String listEdgeForVertex(int idVertex) throws org.apache.thrift.TException
    {
      send_listEdgeForVertex(idVertex);
      return recv_listEdgeForVertex();
    }

    public void send_listEdgeForVertex(int idVertex) throws org.apache.thrift.TException
    {
      listEdgeForVertex_args args = new listEdgeForVertex_args();
      args.setIdVertex(idVertex);
      sendBase("listEdgeForVertex", args);
    }

    public String recv_listEdgeForVertex() throws org.apache.thrift.TException
    {
      listEdgeForVertex_result result = new listEdgeForVertex_result();
      receiveBase(result, "listEdgeForVertex");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listEdgeForVertex failed: unknown result");
    }

    public String listVertexForVertex(int idVertex) throws org.apache.thrift.TException
    {
      send_listVertexForVertex(idVertex);
      return recv_listVertexForVertex();
    }

    public void send_listVertexForVertex(int idVertex) throws org.apache.thrift.TException
    {
      listVertexForVertex_args args = new listVertexForVertex_args();
      args.setIdVertex(idVertex);
      sendBase("listVertexForVertex", args);
    }

    public String recv_listVertexForVertex() throws org.apache.thrift.TException
    {
      listVertexForVertex_result result = new listVertexForVertex_result();
      receiveBase(result, "listVertexForVertex");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listVertexForVertex failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void createVertex(Vertex v, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createVertex_call method_call = new createVertex_call(v, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createVertex_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Vertex v;
      public createVertex_call(Vertex v, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.v = v;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createVertex", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createVertex_args args = new createVertex_args();
        args.setV(v);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createVertex();
      }
    }

    public void readVertex(int idEdge, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      readVertex_call method_call = new readVertex_call(idEdge, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class readVertex_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int idEdge;
      public readVertex_call(int idEdge, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.idEdge = idEdge;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("readVertex", org.apache.thrift.protocol.TMessageType.CALL, 0));
        readVertex_args args = new readVertex_args();
        args.setIdEdge(idEdge);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_readVertex();
      }
    }

    public void deleteVertex(int idVertex, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteVertex_call method_call = new deleteVertex_call(idVertex, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteVertex_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int idVertex;
      public deleteVertex_call(int idVertex, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.idVertex = idVertex;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteVertex", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteVertex_args args = new deleteVertex_args();
        args.setIdVertex(idVertex);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteVertex();
      }
    }

    public void showBase(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      showBase_call method_call = new showBase_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class showBase_call extends org.apache.thrift.async.TAsyncMethodCall {
      public showBase_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("showBase", org.apache.thrift.protocol.TMessageType.CALL, 0));
        showBase_args args = new showBase_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_showBase();
      }
    }

    public void menorDistancia(List<Edge> listaArestas, int tamanho, int tag1, int tag2, List<Vertex> array, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      menorDistancia_call method_call = new menorDistancia_call(listaArestas, tamanho, tag1, tag2, array, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class menorDistancia_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Edge> listaArestas;
      private int tamanho;
      private int tag1;
      private int tag2;
      private List<Vertex> array;
      public menorDistancia_call(List<Edge> listaArestas, int tamanho, int tag1, int tag2, List<Vertex> array, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.listaArestas = listaArestas;
        this.tamanho = tamanho;
        this.tag1 = tag1;
        this.tag2 = tag2;
        this.array = array;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("menorDistancia", org.apache.thrift.protocol.TMessageType.CALL, 0));
        menorDistancia_args args = new menorDistancia_args();
        args.setListaArestas(listaArestas);
        args.setTamanho(tamanho);
        args.setTag1(tag1);
        args.setTag2(tag2);
        args.setArray(array);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Object getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_menorDistancia();
      }
    }

    public void ReadVertexObject(int idEdge, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ReadVertexObject_call method_call = new ReadVertexObject_call(idEdge, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ReadVertexObject_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int idEdge;
      public ReadVertexObject_call(int idEdge, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.idEdge = idEdge;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ReadVertexObject", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ReadVertexObject_args args = new ReadVertexObject_args();
        args.setIdEdge(idEdge);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Vertex getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ReadVertexObject();
      }
    }

    public void createEdge(Edge a, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createEdge_call method_call = new createEdge_call(a, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createEdge_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Edge a;
      public createEdge_call(Edge a, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.a = a;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createEdge", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createEdge_args args = new createEdge_args();
        args.setA(a);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createEdge();
      }
    }

    public void readEdge(int idEdge, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      readEdge_call method_call = new readEdge_call(idEdge, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class readEdge_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int idEdge;
      public readEdge_call(int idEdge, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.idEdge = idEdge;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("readEdge", org.apache.thrift.protocol.TMessageType.CALL, 0));
        readEdge_args args = new readEdge_args();
        args.setIdEdge(idEdge);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_readEdge();
      }
    }

    public void deleteEdge(int idEdge, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteEdge_call method_call = new deleteEdge_call(idEdge, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteEdge_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int idEdge;
      public deleteEdge_call(int idEdge, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.idEdge = idEdge;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteEdge", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteEdge_args args = new deleteEdge_args();
        args.setIdEdge(idEdge);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteEdge();
      }
    }

    public void updateVertex(int idVertex, String color, String description, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateVertex_call method_call = new updateVertex_call(idVertex, color, description, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateVertex_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int idVertex;
      private String color;
      private String description;
      public updateVertex_call(int idVertex, String color, String description, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.idVertex = idVertex;
        this.color = color;
        this.description = description;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateVertex", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateVertex_args args = new updateVertex_args();
        args.setIdVertex(idVertex);
        args.setColor(color);
        args.setDescription(description);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateVertex();
      }
    }

    public void updateEdge(int idEdge, String nameEdge, String description, double peso, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateEdge_call method_call = new updateEdge_call(idEdge, nameEdge, description, peso, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateEdge_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int idEdge;
      private String nameEdge;
      private String description;
      private double peso;
      public updateEdge_call(int idEdge, String nameEdge, String description, double peso, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.idEdge = idEdge;
        this.nameEdge = nameEdge;
        this.description = description;
        this.peso = peso;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateEdge", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateEdge_args args = new updateEdge_args();
        args.setIdEdge(idEdge);
        args.setNameEdge(nameEdge);
        args.setDescription(description);
        args.setPeso(peso);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateEdge();
      }
    }

    public void listVertexForEdge(int idEdge, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listVertexForEdge_call method_call = new listVertexForEdge_call(idEdge, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listVertexForEdge_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int idEdge;
      public listVertexForEdge_call(int idEdge, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.idEdge = idEdge;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listVertexForEdge", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listVertexForEdge_args args = new listVertexForEdge_args();
        args.setIdEdge(idEdge);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listVertexForEdge();
      }
    }

    public void listEdgeForVertex(int idVertex, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listEdgeForVertex_call method_call = new listEdgeForVertex_call(idVertex, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listEdgeForVertex_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int idVertex;
      public listEdgeForVertex_call(int idVertex, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.idVertex = idVertex;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listEdgeForVertex", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listEdgeForVertex_args args = new listEdgeForVertex_args();
        args.setIdVertex(idVertex);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listEdgeForVertex();
      }
    }

    public void listVertexForVertex(int idVertex, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listVertexForVertex_call method_call = new listVertexForVertex_call(idVertex, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listVertexForVertex_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int idVertex;
      public listVertexForVertex_call(int idVertex, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.idVertex = idVertex;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listVertexForVertex", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listVertexForVertex_args args = new listVertexForVertex_args();
        args.setIdVertex(idVertex);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listVertexForVertex();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("createVertex", new createVertex());
      processMap.put("readVertex", new readVertex());
      processMap.put("deleteVertex", new deleteVertex());
      processMap.put("showBase", new showBase());
      processMap.put("menorDistancia", new menorDistancia());
      processMap.put("ReadVertexObject", new ReadVertexObject());
      processMap.put("createEdge", new createEdge());
      processMap.put("readEdge", new readEdge());
      processMap.put("deleteEdge", new deleteEdge());
      processMap.put("updateVertex", new updateVertex());
      processMap.put("updateEdge", new updateEdge());
      processMap.put("listVertexForEdge", new listVertexForEdge());
      processMap.put("listEdgeForVertex", new listEdgeForVertex());
      processMap.put("listVertexForVertex", new listVertexForVertex());
      return processMap;
    }

    public static class createVertex<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createVertex_args> {
      public createVertex() {
        super("createVertex");
      }

      public createVertex_args getEmptyArgsInstance() {
        return new createVertex_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createVertex_result getResult(I iface, createVertex_args args) throws org.apache.thrift.TException {
        createVertex_result result = new createVertex_result();
        result.success = iface.createVertex(args.v);
        return result;
      }
    }

    public static class readVertex<I extends Iface> extends org.apache.thrift.ProcessFunction<I, readVertex_args> {
      public readVertex() {
        super("readVertex");
      }

      public readVertex_args getEmptyArgsInstance() {
        return new readVertex_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public readVertex_result getResult(I iface, readVertex_args args) throws org.apache.thrift.TException {
        readVertex_result result = new readVertex_result();
        result.success = iface.readVertex(args.idEdge);
        return result;
      }
    }

    public static class deleteVertex<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteVertex_args> {
      public deleteVertex() {
        super("deleteVertex");
      }

      public deleteVertex_args getEmptyArgsInstance() {
        return new deleteVertex_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteVertex_result getResult(I iface, deleteVertex_args args) throws org.apache.thrift.TException {
        deleteVertex_result result = new deleteVertex_result();
        result.success = iface.deleteVertex(args.idVertex);
        return result;
      }
    }

    public static class showBase<I extends Iface> extends org.apache.thrift.ProcessFunction<I, showBase_args> {
      public showBase() {
        super("showBase");
      }

      public showBase_args getEmptyArgsInstance() {
        return new showBase_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public showBase_result getResult(I iface, showBase_args args) throws org.apache.thrift.TException {
        showBase_result result = new showBase_result();
        result.success = iface.showBase();
        return result;
      }
    }

    public static class menorDistancia<I extends Iface> extends org.apache.thrift.ProcessFunction<I, menorDistancia_args> {
      public menorDistancia() {
        super("menorDistancia");
      }

      public menorDistancia_args getEmptyArgsInstance() {
        return new menorDistancia_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public menorDistancia_result getResult(I iface, menorDistancia_args args) throws org.apache.thrift.TException {
        menorDistancia_result result = new menorDistancia_result();
        result.success = iface.menorDistancia(args.listaArestas, args.tamanho, args.tag1, args.tag2, args.array);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class ReadVertexObject<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ReadVertexObject_args> {
      public ReadVertexObject() {
        super("ReadVertexObject");
      }

      public ReadVertexObject_args getEmptyArgsInstance() {
        return new ReadVertexObject_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ReadVertexObject_result getResult(I iface, ReadVertexObject_args args) throws org.apache.thrift.TException {
        ReadVertexObject_result result = new ReadVertexObject_result();
        result.success = iface.ReadVertexObject(args.idEdge);
        return result;
      }
    }

    public static class createEdge<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createEdge_args> {
      public createEdge() {
        super("createEdge");
      }

      public createEdge_args getEmptyArgsInstance() {
        return new createEdge_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createEdge_result getResult(I iface, createEdge_args args) throws org.apache.thrift.TException {
        createEdge_result result = new createEdge_result();
        result.success = iface.createEdge(args.a);
        return result;
      }
    }

    public static class readEdge<I extends Iface> extends org.apache.thrift.ProcessFunction<I, readEdge_args> {
      public readEdge() {
        super("readEdge");
      }

      public readEdge_args getEmptyArgsInstance() {
        return new readEdge_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public readEdge_result getResult(I iface, readEdge_args args) throws org.apache.thrift.TException {
        readEdge_result result = new readEdge_result();
        result.success = iface.readEdge(args.idEdge);
        return result;
      }
    }

    public static class deleteEdge<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteEdge_args> {
      public deleteEdge() {
        super("deleteEdge");
      }

      public deleteEdge_args getEmptyArgsInstance() {
        return new deleteEdge_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteEdge_result getResult(I iface, deleteEdge_args args) throws org.apache.thrift.TException {
        deleteEdge_result result = new deleteEdge_result();
        result.success = iface.deleteEdge(args.idEdge);
        return result;
      }
    }

    public static class updateVertex<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateVertex_args> {
      public updateVertex() {
        super("updateVertex");
      }

      public updateVertex_args getEmptyArgsInstance() {
        return new updateVertex_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateVertex_result getResult(I iface, updateVertex_args args) throws org.apache.thrift.TException {
        updateVertex_result result = new updateVertex_result();
        result.success = iface.updateVertex(args.idVertex, args.color, args.description);
        return result;
      }
    }

    public static class updateEdge<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateEdge_args> {
      public updateEdge() {
        super("updateEdge");
      }

      public updateEdge_args getEmptyArgsInstance() {
        return new updateEdge_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateEdge_result getResult(I iface, updateEdge_args args) throws org.apache.thrift.TException {
        updateEdge_result result = new updateEdge_result();
        result.success = iface.updateEdge(args.idEdge, args.nameEdge, args.description, args.peso);
        return result;
      }
    }

    public static class listVertexForEdge<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listVertexForEdge_args> {
      public listVertexForEdge() {
        super("listVertexForEdge");
      }

      public listVertexForEdge_args getEmptyArgsInstance() {
        return new listVertexForEdge_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listVertexForEdge_result getResult(I iface, listVertexForEdge_args args) throws org.apache.thrift.TException {
        listVertexForEdge_result result = new listVertexForEdge_result();
        result.success = iface.listVertexForEdge(args.idEdge);
        return result;
      }
    }

    public static class listEdgeForVertex<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listEdgeForVertex_args> {
      public listEdgeForVertex() {
        super("listEdgeForVertex");
      }

      public listEdgeForVertex_args getEmptyArgsInstance() {
        return new listEdgeForVertex_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listEdgeForVertex_result getResult(I iface, listEdgeForVertex_args args) throws org.apache.thrift.TException {
        listEdgeForVertex_result result = new listEdgeForVertex_result();
        result.success = iface.listEdgeForVertex(args.idVertex);
        return result;
      }
    }

    public static class listVertexForVertex<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listVertexForVertex_args> {
      public listVertexForVertex() {
        super("listVertexForVertex");
      }

      public listVertexForVertex_args getEmptyArgsInstance() {
        return new listVertexForVertex_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listVertexForVertex_result getResult(I iface, listVertexForVertex_args args) throws org.apache.thrift.TException {
        listVertexForVertex_result result = new listVertexForVertex_result();
        result.success = iface.listVertexForVertex(args.idVertex);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("createVertex", new createVertex());
      processMap.put("readVertex", new readVertex());
      processMap.put("deleteVertex", new deleteVertex());
      processMap.put("showBase", new showBase());
      processMap.put("menorDistancia", new menorDistancia());
      processMap.put("ReadVertexObject", new ReadVertexObject());
      processMap.put("createEdge", new createEdge());
      processMap.put("readEdge", new readEdge());
      processMap.put("deleteEdge", new deleteEdge());
      processMap.put("updateVertex", new updateVertex());
      processMap.put("updateEdge", new updateEdge());
      processMap.put("listVertexForEdge", new listVertexForEdge());
      processMap.put("listEdgeForVertex", new listEdgeForVertex());
      processMap.put("listVertexForVertex", new listVertexForVertex());
      return processMap;
    }

    public static class createVertex<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createVertex_args, String> {
      public createVertex() {
        super("createVertex");
      }

      public createVertex_args getEmptyArgsInstance() {
        return new createVertex_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            createVertex_result result = new createVertex_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createVertex_result result = new createVertex_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createVertex_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.createVertex(args.v,resultHandler);
      }
    }

    public static class readVertex<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, readVertex_args, String> {
      public readVertex() {
        super("readVertex");
      }

      public readVertex_args getEmptyArgsInstance() {
        return new readVertex_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            readVertex_result result = new readVertex_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            readVertex_result result = new readVertex_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, readVertex_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.readVertex(args.idEdge,resultHandler);
      }
    }

    public static class deleteVertex<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteVertex_args, String> {
      public deleteVertex() {
        super("deleteVertex");
      }

      public deleteVertex_args getEmptyArgsInstance() {
        return new deleteVertex_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            deleteVertex_result result = new deleteVertex_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteVertex_result result = new deleteVertex_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteVertex_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.deleteVertex(args.idVertex,resultHandler);
      }
    }

    public static class showBase<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, showBase_args, String> {
      public showBase() {
        super("showBase");
      }

      public showBase_args getEmptyArgsInstance() {
        return new showBase_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            showBase_result result = new showBase_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            showBase_result result = new showBase_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, showBase_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.showBase(resultHandler);
      }
    }

    public static class menorDistancia<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, menorDistancia_args, Double> {
      public menorDistancia() {
        super("menorDistancia");
      }

      public menorDistancia_args getEmptyArgsInstance() {
        return new menorDistancia_args();
      }

      public AsyncMethodCallback<Double> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Double>() { 
          public void onComplete(Double o) {
            menorDistancia_result result = new menorDistancia_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            menorDistancia_result result = new menorDistancia_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, menorDistancia_args args, org.apache.thrift.async.AsyncMethodCallback<Double> resultHandler) throws TException {
        iface.menorDistancia(args.listaArestas, args.tamanho, args.tag1, args.tag2, args.array,resultHandler);
      }
    }

    public static class ReadVertexObject<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ReadVertexObject_args, Vertex> {
      public ReadVertexObject() {
        super("ReadVertexObject");
      }

      public ReadVertexObject_args getEmptyArgsInstance() {
        return new ReadVertexObject_args();
      }

      public AsyncMethodCallback<Vertex> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Vertex>() { 
          public void onComplete(Vertex o) {
            ReadVertexObject_result result = new ReadVertexObject_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            ReadVertexObject_result result = new ReadVertexObject_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ReadVertexObject_args args, org.apache.thrift.async.AsyncMethodCallback<Vertex> resultHandler) throws TException {
        iface.ReadVertexObject(args.idEdge,resultHandler);
      }
    }

    public static class createEdge<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createEdge_args, String> {
      public createEdge() {
        super("createEdge");
      }

      public createEdge_args getEmptyArgsInstance() {
        return new createEdge_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            createEdge_result result = new createEdge_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createEdge_result result = new createEdge_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createEdge_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.createEdge(args.a,resultHandler);
      }
    }

    public static class readEdge<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, readEdge_args, String> {
      public readEdge() {
        super("readEdge");
      }

      public readEdge_args getEmptyArgsInstance() {
        return new readEdge_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            readEdge_result result = new readEdge_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            readEdge_result result = new readEdge_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, readEdge_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.readEdge(args.idEdge,resultHandler);
      }
    }

    public static class deleteEdge<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteEdge_args, String> {
      public deleteEdge() {
        super("deleteEdge");
      }

      public deleteEdge_args getEmptyArgsInstance() {
        return new deleteEdge_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            deleteEdge_result result = new deleteEdge_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteEdge_result result = new deleteEdge_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteEdge_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.deleteEdge(args.idEdge,resultHandler);
      }
    }

    public static class updateVertex<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateVertex_args, String> {
      public updateVertex() {
        super("updateVertex");
      }

      public updateVertex_args getEmptyArgsInstance() {
        return new updateVertex_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            updateVertex_result result = new updateVertex_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateVertex_result result = new updateVertex_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateVertex_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.updateVertex(args.idVertex, args.color, args.description,resultHandler);
      }
    }

    public static class updateEdge<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateEdge_args, String> {
      public updateEdge() {
        super("updateEdge");
      }

      public updateEdge_args getEmptyArgsInstance() {
        return new updateEdge_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            updateEdge_result result = new updateEdge_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateEdge_result result = new updateEdge_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateEdge_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.updateEdge(args.idEdge, args.nameEdge, args.description, args.peso,resultHandler);
      }
    }

    public static class listVertexForEdge<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listVertexForEdge_args, String> {
      public listVertexForEdge() {
        super("listVertexForEdge");
      }

      public listVertexForEdge_args getEmptyArgsInstance() {
        return new listVertexForEdge_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            listVertexForEdge_result result = new listVertexForEdge_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            listVertexForEdge_result result = new listVertexForEdge_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listVertexForEdge_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.listVertexForEdge(args.idEdge,resultHandler);
      }
    }

    public static class listEdgeForVertex<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listEdgeForVertex_args, String> {
      public listEdgeForVertex() {
        super("listEdgeForVertex");
      }

      public listEdgeForVertex_args getEmptyArgsInstance() {
        return new listEdgeForVertex_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            listEdgeForVertex_result result = new listEdgeForVertex_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            listEdgeForVertex_result result = new listEdgeForVertex_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listEdgeForVertex_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.listEdgeForVertex(args.idVertex,resultHandler);
      }
    }

    public static class listVertexForVertex<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listVertexForVertex_args, String> {
      public listVertexForVertex() {
        super("listVertexForVertex");
      }

      public listVertexForVertex_args getEmptyArgsInstance() {
        return new listVertexForVertex_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            listVertexForVertex_result result = new listVertexForVertex_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            listVertexForVertex_result result = new listVertexForVertex_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listVertexForVertex_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.listVertexForVertex(args.idVertex,resultHandler);
      }
    }

  }

  public static class createVertex_args implements org.apache.thrift.TBase<createVertex_args, createVertex_args._Fields>, java.io.Serializable, Cloneable, Comparable<createVertex_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createVertex_args");

    private static final org.apache.thrift.protocol.TField V_FIELD_DESC = new org.apache.thrift.protocol.TField("v", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createVertex_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createVertex_argsTupleSchemeFactory());
    }

    public Vertex v; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      V((short)1, "v");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // V
            return V;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.V, new org.apache.thrift.meta_data.FieldMetaData("v", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Vertex.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createVertex_args.class, metaDataMap);
    }

    public createVertex_args() {
    }

    public createVertex_args(
      Vertex v)
    {
      this();
      this.v = v;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createVertex_args(createVertex_args other) {
      if (other.isSetV()) {
        this.v = new Vertex(other.v);
      }
    }

    public createVertex_args deepCopy() {
      return new createVertex_args(this);
    }

    @Override
    public void clear() {
      this.v = null;
    }

    public Vertex getV() {
      return this.v;
    }

    public createVertex_args setV(Vertex v) {
      this.v = v;
      return this;
    }

    public void unsetV() {
      this.v = null;
    }

    /** Returns true if field v is set (has been assigned a value) and false otherwise */
    public boolean isSetV() {
      return this.v != null;
    }

    public void setVIsSet(boolean value) {
      if (!value) {
        this.v = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case V:
        if (value == null) {
          unsetV();
        } else {
          setV((Vertex)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case V:
        return getV();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case V:
        return isSetV();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createVertex_args)
        return this.equals((createVertex_args)that);
      return false;
    }

    public boolean equals(createVertex_args that) {
      if (that == null)
        return false;

      boolean this_present_v = true && this.isSetV();
      boolean that_present_v = true && that.isSetV();
      if (this_present_v || that_present_v) {
        if (!(this_present_v && that_present_v))
          return false;
        if (!this.v.equals(that.v))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createVertex_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetV()).compareTo(other.isSetV());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetV()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.v, other.v);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createVertex_args(");
      boolean first = true;

      sb.append("v:");
      if (this.v == null) {
        sb.append("null");
      } else {
        sb.append(this.v);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (v != null) {
        v.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createVertex_argsStandardSchemeFactory implements SchemeFactory {
      public createVertex_argsStandardScheme getScheme() {
        return new createVertex_argsStandardScheme();
      }
    }

    private static class createVertex_argsStandardScheme extends StandardScheme<createVertex_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createVertex_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // V
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.v = new Vertex();
                struct.v.read(iprot);
                struct.setVIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createVertex_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.v != null) {
          oprot.writeFieldBegin(V_FIELD_DESC);
          struct.v.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createVertex_argsTupleSchemeFactory implements SchemeFactory {
      public createVertex_argsTupleScheme getScheme() {
        return new createVertex_argsTupleScheme();
      }
    }

    private static class createVertex_argsTupleScheme extends TupleScheme<createVertex_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createVertex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetV()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetV()) {
          struct.v.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createVertex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.v = new Vertex();
          struct.v.read(iprot);
          struct.setVIsSet(true);
        }
      }
    }

  }

  public static class createVertex_result implements org.apache.thrift.TBase<createVertex_result, createVertex_result._Fields>, java.io.Serializable, Cloneable, Comparable<createVertex_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createVertex_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createVertex_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createVertex_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createVertex_result.class, metaDataMap);
    }

    public createVertex_result() {
    }

    public createVertex_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createVertex_result(createVertex_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public createVertex_result deepCopy() {
      return new createVertex_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public createVertex_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createVertex_result)
        return this.equals((createVertex_result)that);
      return false;
    }

    public boolean equals(createVertex_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createVertex_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createVertex_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createVertex_resultStandardSchemeFactory implements SchemeFactory {
      public createVertex_resultStandardScheme getScheme() {
        return new createVertex_resultStandardScheme();
      }
    }

    private static class createVertex_resultStandardScheme extends StandardScheme<createVertex_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createVertex_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createVertex_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createVertex_resultTupleSchemeFactory implements SchemeFactory {
      public createVertex_resultTupleScheme getScheme() {
        return new createVertex_resultTupleScheme();
      }
    }

    private static class createVertex_resultTupleScheme extends TupleScheme<createVertex_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createVertex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createVertex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class readVertex_args implements org.apache.thrift.TBase<readVertex_args, readVertex_args._Fields>, java.io.Serializable, Cloneable, Comparable<readVertex_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readVertex_args");

    private static final org.apache.thrift.protocol.TField ID_EDGE_FIELD_DESC = new org.apache.thrift.protocol.TField("idEdge", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new readVertex_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new readVertex_argsTupleSchemeFactory());
    }

    public int idEdge; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID_EDGE((short)1, "idEdge");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID_EDGE
            return ID_EDGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __IDEDGE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID_EDGE, new org.apache.thrift.meta_data.FieldMetaData("idEdge", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readVertex_args.class, metaDataMap);
    }

    public readVertex_args() {
    }

    public readVertex_args(
      int idEdge)
    {
      this();
      this.idEdge = idEdge;
      setIdEdgeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readVertex_args(readVertex_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.idEdge = other.idEdge;
    }

    public readVertex_args deepCopy() {
      return new readVertex_args(this);
    }

    @Override
    public void clear() {
      setIdEdgeIsSet(false);
      this.idEdge = 0;
    }

    public int getIdEdge() {
      return this.idEdge;
    }

    public readVertex_args setIdEdge(int idEdge) {
      this.idEdge = idEdge;
      setIdEdgeIsSet(true);
      return this;
    }

    public void unsetIdEdge() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IDEDGE_ISSET_ID);
    }

    /** Returns true if field idEdge is set (has been assigned a value) and false otherwise */
    public boolean isSetIdEdge() {
      return EncodingUtils.testBit(__isset_bitfield, __IDEDGE_ISSET_ID);
    }

    public void setIdEdgeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IDEDGE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID_EDGE:
        if (value == null) {
          unsetIdEdge();
        } else {
          setIdEdge((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID_EDGE:
        return Integer.valueOf(getIdEdge());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID_EDGE:
        return isSetIdEdge();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof readVertex_args)
        return this.equals((readVertex_args)that);
      return false;
    }

    public boolean equals(readVertex_args that) {
      if (that == null)
        return false;

      boolean this_present_idEdge = true;
      boolean that_present_idEdge = true;
      if (this_present_idEdge || that_present_idEdge) {
        if (!(this_present_idEdge && that_present_idEdge))
          return false;
        if (this.idEdge != that.idEdge)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(readVertex_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIdEdge()).compareTo(other.isSetIdEdge());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdEdge()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idEdge, other.idEdge);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("readVertex_args(");
      boolean first = true;

      sb.append("idEdge:");
      sb.append(this.idEdge);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readVertex_argsStandardSchemeFactory implements SchemeFactory {
      public readVertex_argsStandardScheme getScheme() {
        return new readVertex_argsStandardScheme();
      }
    }

    private static class readVertex_argsStandardScheme extends StandardScheme<readVertex_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readVertex_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID_EDGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.idEdge = iprot.readI32();
                struct.setIdEdgeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readVertex_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_EDGE_FIELD_DESC);
        oprot.writeI32(struct.idEdge);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readVertex_argsTupleSchemeFactory implements SchemeFactory {
      public readVertex_argsTupleScheme getScheme() {
        return new readVertex_argsTupleScheme();
      }
    }

    private static class readVertex_argsTupleScheme extends TupleScheme<readVertex_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readVertex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIdEdge()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIdEdge()) {
          oprot.writeI32(struct.idEdge);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readVertex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.idEdge = iprot.readI32();
          struct.setIdEdgeIsSet(true);
        }
      }
    }

  }

  public static class readVertex_result implements org.apache.thrift.TBase<readVertex_result, readVertex_result._Fields>, java.io.Serializable, Cloneable, Comparable<readVertex_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readVertex_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new readVertex_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new readVertex_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readVertex_result.class, metaDataMap);
    }

    public readVertex_result() {
    }

    public readVertex_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readVertex_result(readVertex_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public readVertex_result deepCopy() {
      return new readVertex_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public readVertex_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof readVertex_result)
        return this.equals((readVertex_result)that);
      return false;
    }

    public boolean equals(readVertex_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(readVertex_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("readVertex_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readVertex_resultStandardSchemeFactory implements SchemeFactory {
      public readVertex_resultStandardScheme getScheme() {
        return new readVertex_resultStandardScheme();
      }
    }

    private static class readVertex_resultStandardScheme extends StandardScheme<readVertex_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readVertex_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readVertex_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readVertex_resultTupleSchemeFactory implements SchemeFactory {
      public readVertex_resultTupleScheme getScheme() {
        return new readVertex_resultTupleScheme();
      }
    }

    private static class readVertex_resultTupleScheme extends TupleScheme<readVertex_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readVertex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readVertex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteVertex_args implements org.apache.thrift.TBase<deleteVertex_args, deleteVertex_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteVertex_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteVertex_args");

    private static final org.apache.thrift.protocol.TField ID_VERTEX_FIELD_DESC = new org.apache.thrift.protocol.TField("idVertex", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteVertex_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteVertex_argsTupleSchemeFactory());
    }

    public int idVertex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID_VERTEX((short)1, "idVertex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID_VERTEX
            return ID_VERTEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __IDVERTEX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID_VERTEX, new org.apache.thrift.meta_data.FieldMetaData("idVertex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteVertex_args.class, metaDataMap);
    }

    public deleteVertex_args() {
    }

    public deleteVertex_args(
      int idVertex)
    {
      this();
      this.idVertex = idVertex;
      setIdVertexIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteVertex_args(deleteVertex_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.idVertex = other.idVertex;
    }

    public deleteVertex_args deepCopy() {
      return new deleteVertex_args(this);
    }

    @Override
    public void clear() {
      setIdVertexIsSet(false);
      this.idVertex = 0;
    }

    public int getIdVertex() {
      return this.idVertex;
    }

    public deleteVertex_args setIdVertex(int idVertex) {
      this.idVertex = idVertex;
      setIdVertexIsSet(true);
      return this;
    }

    public void unsetIdVertex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IDVERTEX_ISSET_ID);
    }

    /** Returns true if field idVertex is set (has been assigned a value) and false otherwise */
    public boolean isSetIdVertex() {
      return EncodingUtils.testBit(__isset_bitfield, __IDVERTEX_ISSET_ID);
    }

    public void setIdVertexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IDVERTEX_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID_VERTEX:
        if (value == null) {
          unsetIdVertex();
        } else {
          setIdVertex((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID_VERTEX:
        return Integer.valueOf(getIdVertex());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID_VERTEX:
        return isSetIdVertex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteVertex_args)
        return this.equals((deleteVertex_args)that);
      return false;
    }

    public boolean equals(deleteVertex_args that) {
      if (that == null)
        return false;

      boolean this_present_idVertex = true;
      boolean that_present_idVertex = true;
      if (this_present_idVertex || that_present_idVertex) {
        if (!(this_present_idVertex && that_present_idVertex))
          return false;
        if (this.idVertex != that.idVertex)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteVertex_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIdVertex()).compareTo(other.isSetIdVertex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdVertex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idVertex, other.idVertex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteVertex_args(");
      boolean first = true;

      sb.append("idVertex:");
      sb.append(this.idVertex);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteVertex_argsStandardSchemeFactory implements SchemeFactory {
      public deleteVertex_argsStandardScheme getScheme() {
        return new deleteVertex_argsStandardScheme();
      }
    }

    private static class deleteVertex_argsStandardScheme extends StandardScheme<deleteVertex_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteVertex_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID_VERTEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.idVertex = iprot.readI32();
                struct.setIdVertexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteVertex_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_VERTEX_FIELD_DESC);
        oprot.writeI32(struct.idVertex);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteVertex_argsTupleSchemeFactory implements SchemeFactory {
      public deleteVertex_argsTupleScheme getScheme() {
        return new deleteVertex_argsTupleScheme();
      }
    }

    private static class deleteVertex_argsTupleScheme extends TupleScheme<deleteVertex_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteVertex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIdVertex()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIdVertex()) {
          oprot.writeI32(struct.idVertex);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteVertex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.idVertex = iprot.readI32();
          struct.setIdVertexIsSet(true);
        }
      }
    }

  }

  public static class deleteVertex_result implements org.apache.thrift.TBase<deleteVertex_result, deleteVertex_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteVertex_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteVertex_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteVertex_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteVertex_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteVertex_result.class, metaDataMap);
    }

    public deleteVertex_result() {
    }

    public deleteVertex_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteVertex_result(deleteVertex_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public deleteVertex_result deepCopy() {
      return new deleteVertex_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public deleteVertex_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteVertex_result)
        return this.equals((deleteVertex_result)that);
      return false;
    }

    public boolean equals(deleteVertex_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteVertex_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteVertex_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteVertex_resultStandardSchemeFactory implements SchemeFactory {
      public deleteVertex_resultStandardScheme getScheme() {
        return new deleteVertex_resultStandardScheme();
      }
    }

    private static class deleteVertex_resultStandardScheme extends StandardScheme<deleteVertex_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteVertex_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteVertex_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteVertex_resultTupleSchemeFactory implements SchemeFactory {
      public deleteVertex_resultTupleScheme getScheme() {
        return new deleteVertex_resultTupleScheme();
      }
    }

    private static class deleteVertex_resultTupleScheme extends TupleScheme<deleteVertex_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteVertex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteVertex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class showBase_args implements org.apache.thrift.TBase<showBase_args, showBase_args._Fields>, java.io.Serializable, Cloneable, Comparable<showBase_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("showBase_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new showBase_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new showBase_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(showBase_args.class, metaDataMap);
    }

    public showBase_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public showBase_args(showBase_args other) {
    }

    public showBase_args deepCopy() {
      return new showBase_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof showBase_args)
        return this.equals((showBase_args)that);
      return false;
    }

    public boolean equals(showBase_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(showBase_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("showBase_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class showBase_argsStandardSchemeFactory implements SchemeFactory {
      public showBase_argsStandardScheme getScheme() {
        return new showBase_argsStandardScheme();
      }
    }

    private static class showBase_argsStandardScheme extends StandardScheme<showBase_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, showBase_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, showBase_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class showBase_argsTupleSchemeFactory implements SchemeFactory {
      public showBase_argsTupleScheme getScheme() {
        return new showBase_argsTupleScheme();
      }
    }

    private static class showBase_argsTupleScheme extends TupleScheme<showBase_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, showBase_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, showBase_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class showBase_result implements org.apache.thrift.TBase<showBase_result, showBase_result._Fields>, java.io.Serializable, Cloneable, Comparable<showBase_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("showBase_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new showBase_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new showBase_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(showBase_result.class, metaDataMap);
    }

    public showBase_result() {
    }

    public showBase_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public showBase_result(showBase_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public showBase_result deepCopy() {
      return new showBase_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public showBase_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof showBase_result)
        return this.equals((showBase_result)that);
      return false;
    }

    public boolean equals(showBase_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(showBase_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("showBase_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class showBase_resultStandardSchemeFactory implements SchemeFactory {
      public showBase_resultStandardScheme getScheme() {
        return new showBase_resultStandardScheme();
      }
    }

    private static class showBase_resultStandardScheme extends StandardScheme<showBase_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, showBase_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, showBase_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class showBase_resultTupleSchemeFactory implements SchemeFactory {
      public showBase_resultTupleScheme getScheme() {
        return new showBase_resultTupleScheme();
      }
    }

    private static class showBase_resultTupleScheme extends TupleScheme<showBase_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, showBase_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, showBase_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class menorDistancia_args implements org.apache.thrift.TBase<menorDistancia_args, menorDistancia_args._Fields>, java.io.Serializable, Cloneable, Comparable<menorDistancia_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("menorDistancia_args");

    private static final org.apache.thrift.protocol.TField LISTA_ARESTAS_FIELD_DESC = new org.apache.thrift.protocol.TField("listaArestas", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField TAMANHO_FIELD_DESC = new org.apache.thrift.protocol.TField("tamanho", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField TAG1_FIELD_DESC = new org.apache.thrift.protocol.TField("tag1", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField TAG2_FIELD_DESC = new org.apache.thrift.protocol.TField("tag2", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("array", org.apache.thrift.protocol.TType.LIST, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new menorDistancia_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new menorDistancia_argsTupleSchemeFactory());
    }

    public List<Edge> listaArestas; // required
    public int tamanho; // required
    public int tag1; // required
    public int tag2; // required
    public List<Vertex> array; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LISTA_ARESTAS((short)1, "listaArestas"),
      TAMANHO((short)2, "tamanho"),
      TAG1((short)3, "tag1"),
      TAG2((short)4, "tag2"),
      ARRAY((short)5, "array");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LISTA_ARESTAS
            return LISTA_ARESTAS;
          case 2: // TAMANHO
            return TAMANHO;
          case 3: // TAG1
            return TAG1;
          case 4: // TAG2
            return TAG2;
          case 5: // ARRAY
            return ARRAY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TAMANHO_ISSET_ID = 0;
    private static final int __TAG1_ISSET_ID = 1;
    private static final int __TAG2_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LISTA_ARESTAS, new org.apache.thrift.meta_data.FieldMetaData("listaArestas", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Edge.class))));
      tmpMap.put(_Fields.TAMANHO, new org.apache.thrift.meta_data.FieldMetaData("tamanho", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TAG1, new org.apache.thrift.meta_data.FieldMetaData("tag1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TAG2, new org.apache.thrift.meta_data.FieldMetaData("tag2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ARRAY, new org.apache.thrift.meta_data.FieldMetaData("array", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Vertex.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(menorDistancia_args.class, metaDataMap);
    }

    public menorDistancia_args() {
    }

    public menorDistancia_args(
      List<Edge> listaArestas,
      int tamanho,
      int tag1,
      int tag2,
      List<Vertex> array)
    {
      this();
      this.listaArestas = listaArestas;
      this.tamanho = tamanho;
      setTamanhoIsSet(true);
      this.tag1 = tag1;
      setTag1IsSet(true);
      this.tag2 = tag2;
      setTag2IsSet(true);
      this.array = array;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public menorDistancia_args(menorDistancia_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetListaArestas()) {
        List<Edge> __this__listaArestas = new ArrayList<Edge>(other.listaArestas.size());
        for (Edge other_element : other.listaArestas) {
          __this__listaArestas.add(new Edge(other_element));
        }
        this.listaArestas = __this__listaArestas;
      }
      this.tamanho = other.tamanho;
      this.tag1 = other.tag1;
      this.tag2 = other.tag2;
      if (other.isSetArray()) {
        List<Vertex> __this__array = new ArrayList<Vertex>(other.array.size());
        for (Vertex other_element : other.array) {
          __this__array.add(new Vertex(other_element));
        }
        this.array = __this__array;
      }
    }

    public menorDistancia_args deepCopy() {
      return new menorDistancia_args(this);
    }

    @Override
    public void clear() {
      this.listaArestas = null;
      setTamanhoIsSet(false);
      this.tamanho = 0;
      setTag1IsSet(false);
      this.tag1 = 0;
      setTag2IsSet(false);
      this.tag2 = 0;
      this.array = null;
    }

    public int getListaArestasSize() {
      return (this.listaArestas == null) ? 0 : this.listaArestas.size();
    }

    public java.util.Iterator<Edge> getListaArestasIterator() {
      return (this.listaArestas == null) ? null : this.listaArestas.iterator();
    }

    public void addToListaArestas(Edge elem) {
      if (this.listaArestas == null) {
        this.listaArestas = new ArrayList<Edge>();
      }
      this.listaArestas.add(elem);
    }

    public List<Edge> getListaArestas() {
      return this.listaArestas;
    }

    public menorDistancia_args setListaArestas(List<Edge> listaArestas) {
      this.listaArestas = listaArestas;
      return this;
    }

    public void unsetListaArestas() {
      this.listaArestas = null;
    }

    /** Returns true if field listaArestas is set (has been assigned a value) and false otherwise */
    public boolean isSetListaArestas() {
      return this.listaArestas != null;
    }

    public void setListaArestasIsSet(boolean value) {
      if (!value) {
        this.listaArestas = null;
      }
    }

    public int getTamanho() {
      return this.tamanho;
    }

    public menorDistancia_args setTamanho(int tamanho) {
      this.tamanho = tamanho;
      setTamanhoIsSet(true);
      return this;
    }

    public void unsetTamanho() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TAMANHO_ISSET_ID);
    }

    /** Returns true if field tamanho is set (has been assigned a value) and false otherwise */
    public boolean isSetTamanho() {
      return EncodingUtils.testBit(__isset_bitfield, __TAMANHO_ISSET_ID);
    }

    public void setTamanhoIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TAMANHO_ISSET_ID, value);
    }

    public int getTag1() {
      return this.tag1;
    }

    public menorDistancia_args setTag1(int tag1) {
      this.tag1 = tag1;
      setTag1IsSet(true);
      return this;
    }

    public void unsetTag1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TAG1_ISSET_ID);
    }

    /** Returns true if field tag1 is set (has been assigned a value) and false otherwise */
    public boolean isSetTag1() {
      return EncodingUtils.testBit(__isset_bitfield, __TAG1_ISSET_ID);
    }

    public void setTag1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TAG1_ISSET_ID, value);
    }

    public int getTag2() {
      return this.tag2;
    }

    public menorDistancia_args setTag2(int tag2) {
      this.tag2 = tag2;
      setTag2IsSet(true);
      return this;
    }

    public void unsetTag2() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TAG2_ISSET_ID);
    }

    /** Returns true if field tag2 is set (has been assigned a value) and false otherwise */
    public boolean isSetTag2() {
      return EncodingUtils.testBit(__isset_bitfield, __TAG2_ISSET_ID);
    }

    public void setTag2IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TAG2_ISSET_ID, value);
    }

    public int getArraySize() {
      return (this.array == null) ? 0 : this.array.size();
    }

    public java.util.Iterator<Vertex> getArrayIterator() {
      return (this.array == null) ? null : this.array.iterator();
    }

    public void addToArray(Vertex elem) {
      if (this.array == null) {
        this.array = new ArrayList<Vertex>();
      }
      this.array.add(elem);
    }

    public List<Vertex> getArray() {
      return this.array;
    }

    public menorDistancia_args setArray(List<Vertex> array) {
      this.array = array;
      return this;
    }

    public void unsetArray() {
      this.array = null;
    }

    /** Returns true if field array is set (has been assigned a value) and false otherwise */
    public boolean isSetArray() {
      return this.array != null;
    }

    public void setArrayIsSet(boolean value) {
      if (!value) {
        this.array = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LISTA_ARESTAS:
        if (value == null) {
          unsetListaArestas();
        } else {
          setListaArestas((List<Edge>)value);
        }
        break;

      case TAMANHO:
        if (value == null) {
          unsetTamanho();
        } else {
          setTamanho((Integer)value);
        }
        break;

      case TAG1:
        if (value == null) {
          unsetTag1();
        } else {
          setTag1((Integer)value);
        }
        break;

      case TAG2:
        if (value == null) {
          unsetTag2();
        } else {
          setTag2((Integer)value);
        }
        break;

      case ARRAY:
        if (value == null) {
          unsetArray();
        } else {
          setArray((List<Vertex>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LISTA_ARESTAS:
        return getListaArestas();

      case TAMANHO:
        return Integer.valueOf(getTamanho());

      case TAG1:
        return Integer.valueOf(getTag1());

      case TAG2:
        return Integer.valueOf(getTag2());

      case ARRAY:
        return getArray();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LISTA_ARESTAS:
        return isSetListaArestas();
      case TAMANHO:
        return isSetTamanho();
      case TAG1:
        return isSetTag1();
      case TAG2:
        return isSetTag2();
      case ARRAY:
        return isSetArray();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof menorDistancia_args)
        return this.equals((menorDistancia_args)that);
      return false;
    }

    public boolean equals(menorDistancia_args that) {
      if (that == null)
        return false;

      boolean this_present_listaArestas = true && this.isSetListaArestas();
      boolean that_present_listaArestas = true && that.isSetListaArestas();
      if (this_present_listaArestas || that_present_listaArestas) {
        if (!(this_present_listaArestas && that_present_listaArestas))
          return false;
        if (!this.listaArestas.equals(that.listaArestas))
          return false;
      }

      boolean this_present_tamanho = true;
      boolean that_present_tamanho = true;
      if (this_present_tamanho || that_present_tamanho) {
        if (!(this_present_tamanho && that_present_tamanho))
          return false;
        if (this.tamanho != that.tamanho)
          return false;
      }

      boolean this_present_tag1 = true;
      boolean that_present_tag1 = true;
      if (this_present_tag1 || that_present_tag1) {
        if (!(this_present_tag1 && that_present_tag1))
          return false;
        if (this.tag1 != that.tag1)
          return false;
      }

      boolean this_present_tag2 = true;
      boolean that_present_tag2 = true;
      if (this_present_tag2 || that_present_tag2) {
        if (!(this_present_tag2 && that_present_tag2))
          return false;
        if (this.tag2 != that.tag2)
          return false;
      }

      boolean this_present_array = true && this.isSetArray();
      boolean that_present_array = true && that.isSetArray();
      if (this_present_array || that_present_array) {
        if (!(this_present_array && that_present_array))
          return false;
        if (!this.array.equals(that.array))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(menorDistancia_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetListaArestas()).compareTo(other.isSetListaArestas());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetListaArestas()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listaArestas, other.listaArestas);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTamanho()).compareTo(other.isSetTamanho());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTamanho()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tamanho, other.tamanho);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTag1()).compareTo(other.isSetTag1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTag1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tag1, other.tag1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTag2()).compareTo(other.isSetTag2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTag2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tag2, other.tag2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArray()).compareTo(other.isSetArray());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArray()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.array, other.array);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("menorDistancia_args(");
      boolean first = true;

      sb.append("listaArestas:");
      if (this.listaArestas == null) {
        sb.append("null");
      } else {
        sb.append(this.listaArestas);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tamanho:");
      sb.append(this.tamanho);
      first = false;
      if (!first) sb.append(", ");
      sb.append("tag1:");
      sb.append(this.tag1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("tag2:");
      sb.append(this.tag2);
      first = false;
      if (!first) sb.append(", ");
      sb.append("array:");
      if (this.array == null) {
        sb.append("null");
      } else {
        sb.append(this.array);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class menorDistancia_argsStandardSchemeFactory implements SchemeFactory {
      public menorDistancia_argsStandardScheme getScheme() {
        return new menorDistancia_argsStandardScheme();
      }
    }

    private static class menorDistancia_argsStandardScheme extends StandardScheme<menorDistancia_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, menorDistancia_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LISTA_ARESTAS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.listaArestas = new ArrayList<Edge>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    Edge _elem10;
                    _elem10 = new Edge();
                    _elem10.read(iprot);
                    struct.listaArestas.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setListaArestasIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TAMANHO
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.tamanho = iprot.readI32();
                struct.setTamanhoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TAG1
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.tag1 = iprot.readI32();
                struct.setTag1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TAG2
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.tag2 = iprot.readI32();
                struct.setTag2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ARRAY
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
                  struct.array = new ArrayList<Vertex>(_list11.size);
                  for (int _i12 = 0; _i12 < _list11.size; ++_i12)
                  {
                    Vertex _elem13;
                    _elem13 = new Vertex();
                    _elem13.read(iprot);
                    struct.array.add(_elem13);
                  }
                  iprot.readListEnd();
                }
                struct.setArrayIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, menorDistancia_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.listaArestas != null) {
          oprot.writeFieldBegin(LISTA_ARESTAS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.listaArestas.size()));
            for (Edge _iter14 : struct.listaArestas)
            {
              _iter14.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TAMANHO_FIELD_DESC);
        oprot.writeI32(struct.tamanho);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TAG1_FIELD_DESC);
        oprot.writeI32(struct.tag1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TAG2_FIELD_DESC);
        oprot.writeI32(struct.tag2);
        oprot.writeFieldEnd();
        if (struct.array != null) {
          oprot.writeFieldBegin(ARRAY_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.array.size()));
            for (Vertex _iter15 : struct.array)
            {
              _iter15.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class menorDistancia_argsTupleSchemeFactory implements SchemeFactory {
      public menorDistancia_argsTupleScheme getScheme() {
        return new menorDistancia_argsTupleScheme();
      }
    }

    private static class menorDistancia_argsTupleScheme extends TupleScheme<menorDistancia_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, menorDistancia_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetListaArestas()) {
          optionals.set(0);
        }
        if (struct.isSetTamanho()) {
          optionals.set(1);
        }
        if (struct.isSetTag1()) {
          optionals.set(2);
        }
        if (struct.isSetTag2()) {
          optionals.set(3);
        }
        if (struct.isSetArray()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetListaArestas()) {
          {
            oprot.writeI32(struct.listaArestas.size());
            for (Edge _iter16 : struct.listaArestas)
            {
              _iter16.write(oprot);
            }
          }
        }
        if (struct.isSetTamanho()) {
          oprot.writeI32(struct.tamanho);
        }
        if (struct.isSetTag1()) {
          oprot.writeI32(struct.tag1);
        }
        if (struct.isSetTag2()) {
          oprot.writeI32(struct.tag2);
        }
        if (struct.isSetArray()) {
          {
            oprot.writeI32(struct.array.size());
            for (Vertex _iter17 : struct.array)
            {
              _iter17.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, menorDistancia_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.listaArestas = new ArrayList<Edge>(_list18.size);
            for (int _i19 = 0; _i19 < _list18.size; ++_i19)
            {
              Edge _elem20;
              _elem20 = new Edge();
              _elem20.read(iprot);
              struct.listaArestas.add(_elem20);
            }
          }
          struct.setListaArestasIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tamanho = iprot.readI32();
          struct.setTamanhoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.tag1 = iprot.readI32();
          struct.setTag1IsSet(true);
        }
        if (incoming.get(3)) {
          struct.tag2 = iprot.readI32();
          struct.setTag2IsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.array = new ArrayList<Vertex>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              Vertex _elem23;
              _elem23 = new Vertex();
              _elem23.read(iprot);
              struct.array.add(_elem23);
            }
          }
          struct.setArrayIsSet(true);
        }
      }
    }

  }

  public static class menorDistancia_result implements org.apache.thrift.TBase<menorDistancia_result, menorDistancia_result._Fields>, java.io.Serializable, Cloneable, Comparable<menorDistancia_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("menorDistancia_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new menorDistancia_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new menorDistancia_resultTupleSchemeFactory());
    }

    public double success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(menorDistancia_result.class, metaDataMap);
    }

    public menorDistancia_result() {
    }

    public menorDistancia_result(
      double success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public menorDistancia_result(menorDistancia_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public menorDistancia_result deepCopy() {
      return new menorDistancia_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0.0;
    }

    public double getSuccess() {
      return this.success;
    }

    public menorDistancia_result setSuccess(double success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Double.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof menorDistancia_result)
        return this.equals((menorDistancia_result)that);
      return false;
    }

    public boolean equals(menorDistancia_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(menorDistancia_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("menorDistancia_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class menorDistancia_resultStandardSchemeFactory implements SchemeFactory {
      public menorDistancia_resultStandardScheme getScheme() {
        return new menorDistancia_resultStandardScheme();
      }
    }

    private static class menorDistancia_resultStandardScheme extends StandardScheme<menorDistancia_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, menorDistancia_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.success = iprot.readDouble();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, menorDistancia_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeDouble(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class menorDistancia_resultTupleSchemeFactory implements SchemeFactory {
      public menorDistancia_resultTupleScheme getScheme() {
        return new menorDistancia_resultTupleScheme();
      }
    }

    private static class menorDistancia_resultTupleScheme extends TupleScheme<menorDistancia_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, menorDistancia_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeDouble(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, menorDistancia_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readDouble();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class ReadVertexObject_args implements org.apache.thrift.TBase<ReadVertexObject_args, ReadVertexObject_args._Fields>, java.io.Serializable, Cloneable, Comparable<ReadVertexObject_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReadVertexObject_args");

    private static final org.apache.thrift.protocol.TField ID_EDGE_FIELD_DESC = new org.apache.thrift.protocol.TField("idEdge", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ReadVertexObject_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ReadVertexObject_argsTupleSchemeFactory());
    }

    public int idEdge; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID_EDGE((short)1, "idEdge");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID_EDGE
            return ID_EDGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __IDEDGE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID_EDGE, new org.apache.thrift.meta_data.FieldMetaData("idEdge", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReadVertexObject_args.class, metaDataMap);
    }

    public ReadVertexObject_args() {
    }

    public ReadVertexObject_args(
      int idEdge)
    {
      this();
      this.idEdge = idEdge;
      setIdEdgeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ReadVertexObject_args(ReadVertexObject_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.idEdge = other.idEdge;
    }

    public ReadVertexObject_args deepCopy() {
      return new ReadVertexObject_args(this);
    }

    @Override
    public void clear() {
      setIdEdgeIsSet(false);
      this.idEdge = 0;
    }

    public int getIdEdge() {
      return this.idEdge;
    }

    public ReadVertexObject_args setIdEdge(int idEdge) {
      this.idEdge = idEdge;
      setIdEdgeIsSet(true);
      return this;
    }

    public void unsetIdEdge() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IDEDGE_ISSET_ID);
    }

    /** Returns true if field idEdge is set (has been assigned a value) and false otherwise */
    public boolean isSetIdEdge() {
      return EncodingUtils.testBit(__isset_bitfield, __IDEDGE_ISSET_ID);
    }

    public void setIdEdgeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IDEDGE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID_EDGE:
        if (value == null) {
          unsetIdEdge();
        } else {
          setIdEdge((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID_EDGE:
        return Integer.valueOf(getIdEdge());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID_EDGE:
        return isSetIdEdge();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ReadVertexObject_args)
        return this.equals((ReadVertexObject_args)that);
      return false;
    }

    public boolean equals(ReadVertexObject_args that) {
      if (that == null)
        return false;

      boolean this_present_idEdge = true;
      boolean that_present_idEdge = true;
      if (this_present_idEdge || that_present_idEdge) {
        if (!(this_present_idEdge && that_present_idEdge))
          return false;
        if (this.idEdge != that.idEdge)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(ReadVertexObject_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIdEdge()).compareTo(other.isSetIdEdge());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdEdge()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idEdge, other.idEdge);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ReadVertexObject_args(");
      boolean first = true;

      sb.append("idEdge:");
      sb.append(this.idEdge);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ReadVertexObject_argsStandardSchemeFactory implements SchemeFactory {
      public ReadVertexObject_argsStandardScheme getScheme() {
        return new ReadVertexObject_argsStandardScheme();
      }
    }

    private static class ReadVertexObject_argsStandardScheme extends StandardScheme<ReadVertexObject_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ReadVertexObject_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID_EDGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.idEdge = iprot.readI32();
                struct.setIdEdgeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ReadVertexObject_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_EDGE_FIELD_DESC);
        oprot.writeI32(struct.idEdge);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ReadVertexObject_argsTupleSchemeFactory implements SchemeFactory {
      public ReadVertexObject_argsTupleScheme getScheme() {
        return new ReadVertexObject_argsTupleScheme();
      }
    }

    private static class ReadVertexObject_argsTupleScheme extends TupleScheme<ReadVertexObject_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ReadVertexObject_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIdEdge()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIdEdge()) {
          oprot.writeI32(struct.idEdge);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ReadVertexObject_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.idEdge = iprot.readI32();
          struct.setIdEdgeIsSet(true);
        }
      }
    }

  }

  public static class ReadVertexObject_result implements org.apache.thrift.TBase<ReadVertexObject_result, ReadVertexObject_result._Fields>, java.io.Serializable, Cloneable, Comparable<ReadVertexObject_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReadVertexObject_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ReadVertexObject_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ReadVertexObject_resultTupleSchemeFactory());
    }

    public Vertex success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Vertex.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReadVertexObject_result.class, metaDataMap);
    }

    public ReadVertexObject_result() {
    }

    public ReadVertexObject_result(
      Vertex success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ReadVertexObject_result(ReadVertexObject_result other) {
      if (other.isSetSuccess()) {
        this.success = new Vertex(other.success);
      }
    }

    public ReadVertexObject_result deepCopy() {
      return new ReadVertexObject_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Vertex getSuccess() {
      return this.success;
    }

    public ReadVertexObject_result setSuccess(Vertex success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Vertex)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ReadVertexObject_result)
        return this.equals((ReadVertexObject_result)that);
      return false;
    }

    public boolean equals(ReadVertexObject_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(ReadVertexObject_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ReadVertexObject_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ReadVertexObject_resultStandardSchemeFactory implements SchemeFactory {
      public ReadVertexObject_resultStandardScheme getScheme() {
        return new ReadVertexObject_resultStandardScheme();
      }
    }

    private static class ReadVertexObject_resultStandardScheme extends StandardScheme<ReadVertexObject_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ReadVertexObject_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Vertex();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ReadVertexObject_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ReadVertexObject_resultTupleSchemeFactory implements SchemeFactory {
      public ReadVertexObject_resultTupleScheme getScheme() {
        return new ReadVertexObject_resultTupleScheme();
      }
    }

    private static class ReadVertexObject_resultTupleScheme extends TupleScheme<ReadVertexObject_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ReadVertexObject_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ReadVertexObject_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Vertex();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class createEdge_args implements org.apache.thrift.TBase<createEdge_args, createEdge_args._Fields>, java.io.Serializable, Cloneable, Comparable<createEdge_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createEdge_args");

    private static final org.apache.thrift.protocol.TField A_FIELD_DESC = new org.apache.thrift.protocol.TField("a", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createEdge_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createEdge_argsTupleSchemeFactory());
    }

    public Edge a; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      A((short)1, "a");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // A
            return A;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.A, new org.apache.thrift.meta_data.FieldMetaData("a", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Edge.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createEdge_args.class, metaDataMap);
    }

    public createEdge_args() {
    }

    public createEdge_args(
      Edge a)
    {
      this();
      this.a = a;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createEdge_args(createEdge_args other) {
      if (other.isSetA()) {
        this.a = new Edge(other.a);
      }
    }

    public createEdge_args deepCopy() {
      return new createEdge_args(this);
    }

    @Override
    public void clear() {
      this.a = null;
    }

    public Edge getA() {
      return this.a;
    }

    public createEdge_args setA(Edge a) {
      this.a = a;
      return this;
    }

    public void unsetA() {
      this.a = null;
    }

    /** Returns true if field a is set (has been assigned a value) and false otherwise */
    public boolean isSetA() {
      return this.a != null;
    }

    public void setAIsSet(boolean value) {
      if (!value) {
        this.a = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case A:
        if (value == null) {
          unsetA();
        } else {
          setA((Edge)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case A:
        return getA();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case A:
        return isSetA();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createEdge_args)
        return this.equals((createEdge_args)that);
      return false;
    }

    public boolean equals(createEdge_args that) {
      if (that == null)
        return false;

      boolean this_present_a = true && this.isSetA();
      boolean that_present_a = true && that.isSetA();
      if (this_present_a || that_present_a) {
        if (!(this_present_a && that_present_a))
          return false;
        if (!this.a.equals(that.a))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createEdge_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetA()).compareTo(other.isSetA());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetA()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a, other.a);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createEdge_args(");
      boolean first = true;

      sb.append("a:");
      if (this.a == null) {
        sb.append("null");
      } else {
        sb.append(this.a);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (a != null) {
        a.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createEdge_argsStandardSchemeFactory implements SchemeFactory {
      public createEdge_argsStandardScheme getScheme() {
        return new createEdge_argsStandardScheme();
      }
    }

    private static class createEdge_argsStandardScheme extends StandardScheme<createEdge_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createEdge_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // A
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.a = new Edge();
                struct.a.read(iprot);
                struct.setAIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createEdge_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.a != null) {
          oprot.writeFieldBegin(A_FIELD_DESC);
          struct.a.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createEdge_argsTupleSchemeFactory implements SchemeFactory {
      public createEdge_argsTupleScheme getScheme() {
        return new createEdge_argsTupleScheme();
      }
    }

    private static class createEdge_argsTupleScheme extends TupleScheme<createEdge_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createEdge_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetA()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetA()) {
          struct.a.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createEdge_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.a = new Edge();
          struct.a.read(iprot);
          struct.setAIsSet(true);
        }
      }
    }

  }

  public static class createEdge_result implements org.apache.thrift.TBase<createEdge_result, createEdge_result._Fields>, java.io.Serializable, Cloneable, Comparable<createEdge_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createEdge_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createEdge_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createEdge_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createEdge_result.class, metaDataMap);
    }

    public createEdge_result() {
    }

    public createEdge_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createEdge_result(createEdge_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public createEdge_result deepCopy() {
      return new createEdge_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public createEdge_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createEdge_result)
        return this.equals((createEdge_result)that);
      return false;
    }

    public boolean equals(createEdge_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createEdge_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createEdge_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createEdge_resultStandardSchemeFactory implements SchemeFactory {
      public createEdge_resultStandardScheme getScheme() {
        return new createEdge_resultStandardScheme();
      }
    }

    private static class createEdge_resultStandardScheme extends StandardScheme<createEdge_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createEdge_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createEdge_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createEdge_resultTupleSchemeFactory implements SchemeFactory {
      public createEdge_resultTupleScheme getScheme() {
        return new createEdge_resultTupleScheme();
      }
    }

    private static class createEdge_resultTupleScheme extends TupleScheme<createEdge_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createEdge_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createEdge_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class readEdge_args implements org.apache.thrift.TBase<readEdge_args, readEdge_args._Fields>, java.io.Serializable, Cloneable, Comparable<readEdge_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readEdge_args");

    private static final org.apache.thrift.protocol.TField ID_EDGE_FIELD_DESC = new org.apache.thrift.protocol.TField("idEdge", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new readEdge_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new readEdge_argsTupleSchemeFactory());
    }

    public int idEdge; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID_EDGE((short)1, "idEdge");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID_EDGE
            return ID_EDGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __IDEDGE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID_EDGE, new org.apache.thrift.meta_data.FieldMetaData("idEdge", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readEdge_args.class, metaDataMap);
    }

    public readEdge_args() {
    }

    public readEdge_args(
      int idEdge)
    {
      this();
      this.idEdge = idEdge;
      setIdEdgeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readEdge_args(readEdge_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.idEdge = other.idEdge;
    }

    public readEdge_args deepCopy() {
      return new readEdge_args(this);
    }

    @Override
    public void clear() {
      setIdEdgeIsSet(false);
      this.idEdge = 0;
    }

    public int getIdEdge() {
      return this.idEdge;
    }

    public readEdge_args setIdEdge(int idEdge) {
      this.idEdge = idEdge;
      setIdEdgeIsSet(true);
      return this;
    }

    public void unsetIdEdge() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IDEDGE_ISSET_ID);
    }

    /** Returns true if field idEdge is set (has been assigned a value) and false otherwise */
    public boolean isSetIdEdge() {
      return EncodingUtils.testBit(__isset_bitfield, __IDEDGE_ISSET_ID);
    }

    public void setIdEdgeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IDEDGE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID_EDGE:
        if (value == null) {
          unsetIdEdge();
        } else {
          setIdEdge((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID_EDGE:
        return Integer.valueOf(getIdEdge());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID_EDGE:
        return isSetIdEdge();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof readEdge_args)
        return this.equals((readEdge_args)that);
      return false;
    }

    public boolean equals(readEdge_args that) {
      if (that == null)
        return false;

      boolean this_present_idEdge = true;
      boolean that_present_idEdge = true;
      if (this_present_idEdge || that_present_idEdge) {
        if (!(this_present_idEdge && that_present_idEdge))
          return false;
        if (this.idEdge != that.idEdge)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(readEdge_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIdEdge()).compareTo(other.isSetIdEdge());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdEdge()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idEdge, other.idEdge);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("readEdge_args(");
      boolean first = true;

      sb.append("idEdge:");
      sb.append(this.idEdge);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readEdge_argsStandardSchemeFactory implements SchemeFactory {
      public readEdge_argsStandardScheme getScheme() {
        return new readEdge_argsStandardScheme();
      }
    }

    private static class readEdge_argsStandardScheme extends StandardScheme<readEdge_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readEdge_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID_EDGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.idEdge = iprot.readI32();
                struct.setIdEdgeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readEdge_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_EDGE_FIELD_DESC);
        oprot.writeI32(struct.idEdge);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readEdge_argsTupleSchemeFactory implements SchemeFactory {
      public readEdge_argsTupleScheme getScheme() {
        return new readEdge_argsTupleScheme();
      }
    }

    private static class readEdge_argsTupleScheme extends TupleScheme<readEdge_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readEdge_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIdEdge()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIdEdge()) {
          oprot.writeI32(struct.idEdge);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readEdge_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.idEdge = iprot.readI32();
          struct.setIdEdgeIsSet(true);
        }
      }
    }

  }

  public static class readEdge_result implements org.apache.thrift.TBase<readEdge_result, readEdge_result._Fields>, java.io.Serializable, Cloneable, Comparable<readEdge_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readEdge_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new readEdge_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new readEdge_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readEdge_result.class, metaDataMap);
    }

    public readEdge_result() {
    }

    public readEdge_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readEdge_result(readEdge_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public readEdge_result deepCopy() {
      return new readEdge_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public readEdge_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof readEdge_result)
        return this.equals((readEdge_result)that);
      return false;
    }

    public boolean equals(readEdge_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(readEdge_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("readEdge_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readEdge_resultStandardSchemeFactory implements SchemeFactory {
      public readEdge_resultStandardScheme getScheme() {
        return new readEdge_resultStandardScheme();
      }
    }

    private static class readEdge_resultStandardScheme extends StandardScheme<readEdge_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readEdge_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readEdge_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readEdge_resultTupleSchemeFactory implements SchemeFactory {
      public readEdge_resultTupleScheme getScheme() {
        return new readEdge_resultTupleScheme();
      }
    }

    private static class readEdge_resultTupleScheme extends TupleScheme<readEdge_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readEdge_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readEdge_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteEdge_args implements org.apache.thrift.TBase<deleteEdge_args, deleteEdge_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteEdge_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteEdge_args");

    private static final org.apache.thrift.protocol.TField ID_EDGE_FIELD_DESC = new org.apache.thrift.protocol.TField("idEdge", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteEdge_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteEdge_argsTupleSchemeFactory());
    }

    public int idEdge; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID_EDGE((short)1, "idEdge");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID_EDGE
            return ID_EDGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __IDEDGE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID_EDGE, new org.apache.thrift.meta_data.FieldMetaData("idEdge", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteEdge_args.class, metaDataMap);
    }

    public deleteEdge_args() {
    }

    public deleteEdge_args(
      int idEdge)
    {
      this();
      this.idEdge = idEdge;
      setIdEdgeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteEdge_args(deleteEdge_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.idEdge = other.idEdge;
    }

    public deleteEdge_args deepCopy() {
      return new deleteEdge_args(this);
    }

    @Override
    public void clear() {
      setIdEdgeIsSet(false);
      this.idEdge = 0;
    }

    public int getIdEdge() {
      return this.idEdge;
    }

    public deleteEdge_args setIdEdge(int idEdge) {
      this.idEdge = idEdge;
      setIdEdgeIsSet(true);
      return this;
    }

    public void unsetIdEdge() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IDEDGE_ISSET_ID);
    }

    /** Returns true if field idEdge is set (has been assigned a value) and false otherwise */
    public boolean isSetIdEdge() {
      return EncodingUtils.testBit(__isset_bitfield, __IDEDGE_ISSET_ID);
    }

    public void setIdEdgeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IDEDGE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID_EDGE:
        if (value == null) {
          unsetIdEdge();
        } else {
          setIdEdge((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID_EDGE:
        return Integer.valueOf(getIdEdge());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID_EDGE:
        return isSetIdEdge();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteEdge_args)
        return this.equals((deleteEdge_args)that);
      return false;
    }

    public boolean equals(deleteEdge_args that) {
      if (that == null)
        return false;

      boolean this_present_idEdge = true;
      boolean that_present_idEdge = true;
      if (this_present_idEdge || that_present_idEdge) {
        if (!(this_present_idEdge && that_present_idEdge))
          return false;
        if (this.idEdge != that.idEdge)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteEdge_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIdEdge()).compareTo(other.isSetIdEdge());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdEdge()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idEdge, other.idEdge);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteEdge_args(");
      boolean first = true;

      sb.append("idEdge:");
      sb.append(this.idEdge);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteEdge_argsStandardSchemeFactory implements SchemeFactory {
      public deleteEdge_argsStandardScheme getScheme() {
        return new deleteEdge_argsStandardScheme();
      }
    }

    private static class deleteEdge_argsStandardScheme extends StandardScheme<deleteEdge_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteEdge_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID_EDGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.idEdge = iprot.readI32();
                struct.setIdEdgeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteEdge_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_EDGE_FIELD_DESC);
        oprot.writeI32(struct.idEdge);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteEdge_argsTupleSchemeFactory implements SchemeFactory {
      public deleteEdge_argsTupleScheme getScheme() {
        return new deleteEdge_argsTupleScheme();
      }
    }

    private static class deleteEdge_argsTupleScheme extends TupleScheme<deleteEdge_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteEdge_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIdEdge()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIdEdge()) {
          oprot.writeI32(struct.idEdge);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteEdge_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.idEdge = iprot.readI32();
          struct.setIdEdgeIsSet(true);
        }
      }
    }

  }

  public static class deleteEdge_result implements org.apache.thrift.TBase<deleteEdge_result, deleteEdge_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteEdge_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteEdge_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteEdge_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteEdge_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteEdge_result.class, metaDataMap);
    }

    public deleteEdge_result() {
    }

    public deleteEdge_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteEdge_result(deleteEdge_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public deleteEdge_result deepCopy() {
      return new deleteEdge_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public deleteEdge_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteEdge_result)
        return this.equals((deleteEdge_result)that);
      return false;
    }

    public boolean equals(deleteEdge_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteEdge_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteEdge_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteEdge_resultStandardSchemeFactory implements SchemeFactory {
      public deleteEdge_resultStandardScheme getScheme() {
        return new deleteEdge_resultStandardScheme();
      }
    }

    private static class deleteEdge_resultStandardScheme extends StandardScheme<deleteEdge_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteEdge_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteEdge_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteEdge_resultTupleSchemeFactory implements SchemeFactory {
      public deleteEdge_resultTupleScheme getScheme() {
        return new deleteEdge_resultTupleScheme();
      }
    }

    private static class deleteEdge_resultTupleScheme extends TupleScheme<deleteEdge_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteEdge_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteEdge_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateVertex_args implements org.apache.thrift.TBase<updateVertex_args, updateVertex_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateVertex_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateVertex_args");

    private static final org.apache.thrift.protocol.TField ID_VERTEX_FIELD_DESC = new org.apache.thrift.protocol.TField("idVertex", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField COLOR_FIELD_DESC = new org.apache.thrift.protocol.TField("color", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateVertex_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateVertex_argsTupleSchemeFactory());
    }

    public int idVertex; // required
    public String color; // required
    public String description; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID_VERTEX((short)1, "idVertex"),
      COLOR((short)2, "color"),
      DESCRIPTION((short)3, "description");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID_VERTEX
            return ID_VERTEX;
          case 2: // COLOR
            return COLOR;
          case 3: // DESCRIPTION
            return DESCRIPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __IDVERTEX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID_VERTEX, new org.apache.thrift.meta_data.FieldMetaData("idVertex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COLOR, new org.apache.thrift.meta_data.FieldMetaData("color", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateVertex_args.class, metaDataMap);
    }

    public updateVertex_args() {
    }

    public updateVertex_args(
      int idVertex,
      String color,
      String description)
    {
      this();
      this.idVertex = idVertex;
      setIdVertexIsSet(true);
      this.color = color;
      this.description = description;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateVertex_args(updateVertex_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.idVertex = other.idVertex;
      if (other.isSetColor()) {
        this.color = other.color;
      }
      if (other.isSetDescription()) {
        this.description = other.description;
      }
    }

    public updateVertex_args deepCopy() {
      return new updateVertex_args(this);
    }

    @Override
    public void clear() {
      setIdVertexIsSet(false);
      this.idVertex = 0;
      this.color = null;
      this.description = null;
    }

    public int getIdVertex() {
      return this.idVertex;
    }

    public updateVertex_args setIdVertex(int idVertex) {
      this.idVertex = idVertex;
      setIdVertexIsSet(true);
      return this;
    }

    public void unsetIdVertex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IDVERTEX_ISSET_ID);
    }

    /** Returns true if field idVertex is set (has been assigned a value) and false otherwise */
    public boolean isSetIdVertex() {
      return EncodingUtils.testBit(__isset_bitfield, __IDVERTEX_ISSET_ID);
    }

    public void setIdVertexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IDVERTEX_ISSET_ID, value);
    }

    public String getColor() {
      return this.color;
    }

    public updateVertex_args setColor(String color) {
      this.color = color;
      return this;
    }

    public void unsetColor() {
      this.color = null;
    }

    /** Returns true if field color is set (has been assigned a value) and false otherwise */
    public boolean isSetColor() {
      return this.color != null;
    }

    public void setColorIsSet(boolean value) {
      if (!value) {
        this.color = null;
      }
    }

    public String getDescription() {
      return this.description;
    }

    public updateVertex_args setDescription(String description) {
      this.description = description;
      return this;
    }

    public void unsetDescription() {
      this.description = null;
    }

    /** Returns true if field description is set (has been assigned a value) and false otherwise */
    public boolean isSetDescription() {
      return this.description != null;
    }

    public void setDescriptionIsSet(boolean value) {
      if (!value) {
        this.description = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID_VERTEX:
        if (value == null) {
          unsetIdVertex();
        } else {
          setIdVertex((Integer)value);
        }
        break;

      case COLOR:
        if (value == null) {
          unsetColor();
        } else {
          setColor((String)value);
        }
        break;

      case DESCRIPTION:
        if (value == null) {
          unsetDescription();
        } else {
          setDescription((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID_VERTEX:
        return Integer.valueOf(getIdVertex());

      case COLOR:
        return getColor();

      case DESCRIPTION:
        return getDescription();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID_VERTEX:
        return isSetIdVertex();
      case COLOR:
        return isSetColor();
      case DESCRIPTION:
        return isSetDescription();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateVertex_args)
        return this.equals((updateVertex_args)that);
      return false;
    }

    public boolean equals(updateVertex_args that) {
      if (that == null)
        return false;

      boolean this_present_idVertex = true;
      boolean that_present_idVertex = true;
      if (this_present_idVertex || that_present_idVertex) {
        if (!(this_present_idVertex && that_present_idVertex))
          return false;
        if (this.idVertex != that.idVertex)
          return false;
      }

      boolean this_present_color = true && this.isSetColor();
      boolean that_present_color = true && that.isSetColor();
      if (this_present_color || that_present_color) {
        if (!(this_present_color && that_present_color))
          return false;
        if (!this.color.equals(that.color))
          return false;
      }

      boolean this_present_description = true && this.isSetDescription();
      boolean that_present_description = true && that.isSetDescription();
      if (this_present_description || that_present_description) {
        if (!(this_present_description && that_present_description))
          return false;
        if (!this.description.equals(that.description))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateVertex_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIdVertex()).compareTo(other.isSetIdVertex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdVertex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idVertex, other.idVertex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetColor()).compareTo(other.isSetColor());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColor()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.color, other.color);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDescription()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateVertex_args(");
      boolean first = true;

      sb.append("idVertex:");
      sb.append(this.idVertex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("color:");
      if (this.color == null) {
        sb.append("null");
      } else {
        sb.append(this.color);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateVertex_argsStandardSchemeFactory implements SchemeFactory {
      public updateVertex_argsStandardScheme getScheme() {
        return new updateVertex_argsStandardScheme();
      }
    }

    private static class updateVertex_argsStandardScheme extends StandardScheme<updateVertex_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateVertex_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID_VERTEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.idVertex = iprot.readI32();
                struct.setIdVertexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COLOR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.color = iprot.readString();
                struct.setColorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DESCRIPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.description = iprot.readString();
                struct.setDescriptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateVertex_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_VERTEX_FIELD_DESC);
        oprot.writeI32(struct.idVertex);
        oprot.writeFieldEnd();
        if (struct.color != null) {
          oprot.writeFieldBegin(COLOR_FIELD_DESC);
          oprot.writeString(struct.color);
          oprot.writeFieldEnd();
        }
        if (struct.description != null) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateVertex_argsTupleSchemeFactory implements SchemeFactory {
      public updateVertex_argsTupleScheme getScheme() {
        return new updateVertex_argsTupleScheme();
      }
    }

    private static class updateVertex_argsTupleScheme extends TupleScheme<updateVertex_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateVertex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIdVertex()) {
          optionals.set(0);
        }
        if (struct.isSetColor()) {
          optionals.set(1);
        }
        if (struct.isSetDescription()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetIdVertex()) {
          oprot.writeI32(struct.idVertex);
        }
        if (struct.isSetColor()) {
          oprot.writeString(struct.color);
        }
        if (struct.isSetDescription()) {
          oprot.writeString(struct.description);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateVertex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.idVertex = iprot.readI32();
          struct.setIdVertexIsSet(true);
        }
        if (incoming.get(1)) {
          struct.color = iprot.readString();
          struct.setColorIsSet(true);
        }
        if (incoming.get(2)) {
          struct.description = iprot.readString();
          struct.setDescriptionIsSet(true);
        }
      }
    }

  }

  public static class updateVertex_result implements org.apache.thrift.TBase<updateVertex_result, updateVertex_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateVertex_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateVertex_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateVertex_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateVertex_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateVertex_result.class, metaDataMap);
    }

    public updateVertex_result() {
    }

    public updateVertex_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateVertex_result(updateVertex_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public updateVertex_result deepCopy() {
      return new updateVertex_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public updateVertex_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateVertex_result)
        return this.equals((updateVertex_result)that);
      return false;
    }

    public boolean equals(updateVertex_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateVertex_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateVertex_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateVertex_resultStandardSchemeFactory implements SchemeFactory {
      public updateVertex_resultStandardScheme getScheme() {
        return new updateVertex_resultStandardScheme();
      }
    }

    private static class updateVertex_resultStandardScheme extends StandardScheme<updateVertex_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateVertex_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateVertex_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateVertex_resultTupleSchemeFactory implements SchemeFactory {
      public updateVertex_resultTupleScheme getScheme() {
        return new updateVertex_resultTupleScheme();
      }
    }

    private static class updateVertex_resultTupleScheme extends TupleScheme<updateVertex_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateVertex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateVertex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateEdge_args implements org.apache.thrift.TBase<updateEdge_args, updateEdge_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateEdge_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateEdge_args");

    private static final org.apache.thrift.protocol.TField ID_EDGE_FIELD_DESC = new org.apache.thrift.protocol.TField("idEdge", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_EDGE_FIELD_DESC = new org.apache.thrift.protocol.TField("nameEdge", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PESO_FIELD_DESC = new org.apache.thrift.protocol.TField("peso", org.apache.thrift.protocol.TType.DOUBLE, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateEdge_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateEdge_argsTupleSchemeFactory());
    }

    public int idEdge; // required
    public String nameEdge; // required
    public String description; // required
    public double peso; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID_EDGE((short)1, "idEdge"),
      NAME_EDGE((short)2, "nameEdge"),
      DESCRIPTION((short)3, "description"),
      PESO((short)4, "peso");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID_EDGE
            return ID_EDGE;
          case 2: // NAME_EDGE
            return NAME_EDGE;
          case 3: // DESCRIPTION
            return DESCRIPTION;
          case 4: // PESO
            return PESO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __IDEDGE_ISSET_ID = 0;
    private static final int __PESO_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID_EDGE, new org.apache.thrift.meta_data.FieldMetaData("idEdge", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NAME_EDGE, new org.apache.thrift.meta_data.FieldMetaData("nameEdge", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PESO, new org.apache.thrift.meta_data.FieldMetaData("peso", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateEdge_args.class, metaDataMap);
    }

    public updateEdge_args() {
    }

    public updateEdge_args(
      int idEdge,
      String nameEdge,
      String description,
      double peso)
    {
      this();
      this.idEdge = idEdge;
      setIdEdgeIsSet(true);
      this.nameEdge = nameEdge;
      this.description = description;
      this.peso = peso;
      setPesoIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateEdge_args(updateEdge_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.idEdge = other.idEdge;
      if (other.isSetNameEdge()) {
        this.nameEdge = other.nameEdge;
      }
      if (other.isSetDescription()) {
        this.description = other.description;
      }
      this.peso = other.peso;
    }

    public updateEdge_args deepCopy() {
      return new updateEdge_args(this);
    }

    @Override
    public void clear() {
      setIdEdgeIsSet(false);
      this.idEdge = 0;
      this.nameEdge = null;
      this.description = null;
      setPesoIsSet(false);
      this.peso = 0.0;
    }

    public int getIdEdge() {
      return this.idEdge;
    }

    public updateEdge_args setIdEdge(int idEdge) {
      this.idEdge = idEdge;
      setIdEdgeIsSet(true);
      return this;
    }

    public void unsetIdEdge() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IDEDGE_ISSET_ID);
    }

    /** Returns true if field idEdge is set (has been assigned a value) and false otherwise */
    public boolean isSetIdEdge() {
      return EncodingUtils.testBit(__isset_bitfield, __IDEDGE_ISSET_ID);
    }

    public void setIdEdgeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IDEDGE_ISSET_ID, value);
    }

    public String getNameEdge() {
      return this.nameEdge;
    }

    public updateEdge_args setNameEdge(String nameEdge) {
      this.nameEdge = nameEdge;
      return this;
    }

    public void unsetNameEdge() {
      this.nameEdge = null;
    }

    /** Returns true if field nameEdge is set (has been assigned a value) and false otherwise */
    public boolean isSetNameEdge() {
      return this.nameEdge != null;
    }

    public void setNameEdgeIsSet(boolean value) {
      if (!value) {
        this.nameEdge = null;
      }
    }

    public String getDescription() {
      return this.description;
    }

    public updateEdge_args setDescription(String description) {
      this.description = description;
      return this;
    }

    public void unsetDescription() {
      this.description = null;
    }

    /** Returns true if field description is set (has been assigned a value) and false otherwise */
    public boolean isSetDescription() {
      return this.description != null;
    }

    public void setDescriptionIsSet(boolean value) {
      if (!value) {
        this.description = null;
      }
    }

    public double getPeso() {
      return this.peso;
    }

    public updateEdge_args setPeso(double peso) {
      this.peso = peso;
      setPesoIsSet(true);
      return this;
    }

    public void unsetPeso() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PESO_ISSET_ID);
    }

    /** Returns true if field peso is set (has been assigned a value) and false otherwise */
    public boolean isSetPeso() {
      return EncodingUtils.testBit(__isset_bitfield, __PESO_ISSET_ID);
    }

    public void setPesoIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PESO_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID_EDGE:
        if (value == null) {
          unsetIdEdge();
        } else {
          setIdEdge((Integer)value);
        }
        break;

      case NAME_EDGE:
        if (value == null) {
          unsetNameEdge();
        } else {
          setNameEdge((String)value);
        }
        break;

      case DESCRIPTION:
        if (value == null) {
          unsetDescription();
        } else {
          setDescription((String)value);
        }
        break;

      case PESO:
        if (value == null) {
          unsetPeso();
        } else {
          setPeso((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID_EDGE:
        return Integer.valueOf(getIdEdge());

      case NAME_EDGE:
        return getNameEdge();

      case DESCRIPTION:
        return getDescription();

      case PESO:
        return Double.valueOf(getPeso());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID_EDGE:
        return isSetIdEdge();
      case NAME_EDGE:
        return isSetNameEdge();
      case DESCRIPTION:
        return isSetDescription();
      case PESO:
        return isSetPeso();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateEdge_args)
        return this.equals((updateEdge_args)that);
      return false;
    }

    public boolean equals(updateEdge_args that) {
      if (that == null)
        return false;

      boolean this_present_idEdge = true;
      boolean that_present_idEdge = true;
      if (this_present_idEdge || that_present_idEdge) {
        if (!(this_present_idEdge && that_present_idEdge))
          return false;
        if (this.idEdge != that.idEdge)
          return false;
      }

      boolean this_present_nameEdge = true && this.isSetNameEdge();
      boolean that_present_nameEdge = true && that.isSetNameEdge();
      if (this_present_nameEdge || that_present_nameEdge) {
        if (!(this_present_nameEdge && that_present_nameEdge))
          return false;
        if (!this.nameEdge.equals(that.nameEdge))
          return false;
      }

      boolean this_present_description = true && this.isSetDescription();
      boolean that_present_description = true && that.isSetDescription();
      if (this_present_description || that_present_description) {
        if (!(this_present_description && that_present_description))
          return false;
        if (!this.description.equals(that.description))
          return false;
      }

      boolean this_present_peso = true;
      boolean that_present_peso = true;
      if (this_present_peso || that_present_peso) {
        if (!(this_present_peso && that_present_peso))
          return false;
        if (this.peso != that.peso)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateEdge_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIdEdge()).compareTo(other.isSetIdEdge());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdEdge()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idEdge, other.idEdge);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNameEdge()).compareTo(other.isSetNameEdge());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNameEdge()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nameEdge, other.nameEdge);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDescription()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPeso()).compareTo(other.isSetPeso());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPeso()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.peso, other.peso);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateEdge_args(");
      boolean first = true;

      sb.append("idEdge:");
      sb.append(this.idEdge);
      first = false;
      if (!first) sb.append(", ");
      sb.append("nameEdge:");
      if (this.nameEdge == null) {
        sb.append("null");
      } else {
        sb.append(this.nameEdge);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("peso:");
      sb.append(this.peso);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateEdge_argsStandardSchemeFactory implements SchemeFactory {
      public updateEdge_argsStandardScheme getScheme() {
        return new updateEdge_argsStandardScheme();
      }
    }

    private static class updateEdge_argsStandardScheme extends StandardScheme<updateEdge_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateEdge_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID_EDGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.idEdge = iprot.readI32();
                struct.setIdEdgeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME_EDGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nameEdge = iprot.readString();
                struct.setNameEdgeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DESCRIPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.description = iprot.readString();
                struct.setDescriptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PESO
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.peso = iprot.readDouble();
                struct.setPesoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateEdge_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_EDGE_FIELD_DESC);
        oprot.writeI32(struct.idEdge);
        oprot.writeFieldEnd();
        if (struct.nameEdge != null) {
          oprot.writeFieldBegin(NAME_EDGE_FIELD_DESC);
          oprot.writeString(struct.nameEdge);
          oprot.writeFieldEnd();
        }
        if (struct.description != null) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PESO_FIELD_DESC);
        oprot.writeDouble(struct.peso);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateEdge_argsTupleSchemeFactory implements SchemeFactory {
      public updateEdge_argsTupleScheme getScheme() {
        return new updateEdge_argsTupleScheme();
      }
    }

    private static class updateEdge_argsTupleScheme extends TupleScheme<updateEdge_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateEdge_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIdEdge()) {
          optionals.set(0);
        }
        if (struct.isSetNameEdge()) {
          optionals.set(1);
        }
        if (struct.isSetDescription()) {
          optionals.set(2);
        }
        if (struct.isSetPeso()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetIdEdge()) {
          oprot.writeI32(struct.idEdge);
        }
        if (struct.isSetNameEdge()) {
          oprot.writeString(struct.nameEdge);
        }
        if (struct.isSetDescription()) {
          oprot.writeString(struct.description);
        }
        if (struct.isSetPeso()) {
          oprot.writeDouble(struct.peso);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateEdge_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.idEdge = iprot.readI32();
          struct.setIdEdgeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nameEdge = iprot.readString();
          struct.setNameEdgeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.description = iprot.readString();
          struct.setDescriptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.peso = iprot.readDouble();
          struct.setPesoIsSet(true);
        }
      }
    }

  }

  public static class updateEdge_result implements org.apache.thrift.TBase<updateEdge_result, updateEdge_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateEdge_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateEdge_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateEdge_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateEdge_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateEdge_result.class, metaDataMap);
    }

    public updateEdge_result() {
    }

    public updateEdge_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateEdge_result(updateEdge_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public updateEdge_result deepCopy() {
      return new updateEdge_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public updateEdge_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateEdge_result)
        return this.equals((updateEdge_result)that);
      return false;
    }

    public boolean equals(updateEdge_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateEdge_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateEdge_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateEdge_resultStandardSchemeFactory implements SchemeFactory {
      public updateEdge_resultStandardScheme getScheme() {
        return new updateEdge_resultStandardScheme();
      }
    }

    private static class updateEdge_resultStandardScheme extends StandardScheme<updateEdge_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateEdge_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateEdge_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateEdge_resultTupleSchemeFactory implements SchemeFactory {
      public updateEdge_resultTupleScheme getScheme() {
        return new updateEdge_resultTupleScheme();
      }
    }

    private static class updateEdge_resultTupleScheme extends TupleScheme<updateEdge_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateEdge_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateEdge_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class listVertexForEdge_args implements org.apache.thrift.TBase<listVertexForEdge_args, listVertexForEdge_args._Fields>, java.io.Serializable, Cloneable, Comparable<listVertexForEdge_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listVertexForEdge_args");

    private static final org.apache.thrift.protocol.TField ID_EDGE_FIELD_DESC = new org.apache.thrift.protocol.TField("idEdge", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listVertexForEdge_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listVertexForEdge_argsTupleSchemeFactory());
    }

    public int idEdge; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID_EDGE((short)1, "idEdge");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID_EDGE
            return ID_EDGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __IDEDGE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID_EDGE, new org.apache.thrift.meta_data.FieldMetaData("idEdge", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listVertexForEdge_args.class, metaDataMap);
    }

    public listVertexForEdge_args() {
    }

    public listVertexForEdge_args(
      int idEdge)
    {
      this();
      this.idEdge = idEdge;
      setIdEdgeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listVertexForEdge_args(listVertexForEdge_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.idEdge = other.idEdge;
    }

    public listVertexForEdge_args deepCopy() {
      return new listVertexForEdge_args(this);
    }

    @Override
    public void clear() {
      setIdEdgeIsSet(false);
      this.idEdge = 0;
    }

    public int getIdEdge() {
      return this.idEdge;
    }

    public listVertexForEdge_args setIdEdge(int idEdge) {
      this.idEdge = idEdge;
      setIdEdgeIsSet(true);
      return this;
    }

    public void unsetIdEdge() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IDEDGE_ISSET_ID);
    }

    /** Returns true if field idEdge is set (has been assigned a value) and false otherwise */
    public boolean isSetIdEdge() {
      return EncodingUtils.testBit(__isset_bitfield, __IDEDGE_ISSET_ID);
    }

    public void setIdEdgeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IDEDGE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID_EDGE:
        if (value == null) {
          unsetIdEdge();
        } else {
          setIdEdge((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID_EDGE:
        return Integer.valueOf(getIdEdge());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID_EDGE:
        return isSetIdEdge();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listVertexForEdge_args)
        return this.equals((listVertexForEdge_args)that);
      return false;
    }

    public boolean equals(listVertexForEdge_args that) {
      if (that == null)
        return false;

      boolean this_present_idEdge = true;
      boolean that_present_idEdge = true;
      if (this_present_idEdge || that_present_idEdge) {
        if (!(this_present_idEdge && that_present_idEdge))
          return false;
        if (this.idEdge != that.idEdge)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(listVertexForEdge_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIdEdge()).compareTo(other.isSetIdEdge());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdEdge()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idEdge, other.idEdge);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listVertexForEdge_args(");
      boolean first = true;

      sb.append("idEdge:");
      sb.append(this.idEdge);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listVertexForEdge_argsStandardSchemeFactory implements SchemeFactory {
      public listVertexForEdge_argsStandardScheme getScheme() {
        return new listVertexForEdge_argsStandardScheme();
      }
    }

    private static class listVertexForEdge_argsStandardScheme extends StandardScheme<listVertexForEdge_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listVertexForEdge_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID_EDGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.idEdge = iprot.readI32();
                struct.setIdEdgeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listVertexForEdge_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_EDGE_FIELD_DESC);
        oprot.writeI32(struct.idEdge);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listVertexForEdge_argsTupleSchemeFactory implements SchemeFactory {
      public listVertexForEdge_argsTupleScheme getScheme() {
        return new listVertexForEdge_argsTupleScheme();
      }
    }

    private static class listVertexForEdge_argsTupleScheme extends TupleScheme<listVertexForEdge_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listVertexForEdge_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIdEdge()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIdEdge()) {
          oprot.writeI32(struct.idEdge);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listVertexForEdge_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.idEdge = iprot.readI32();
          struct.setIdEdgeIsSet(true);
        }
      }
    }

  }

  public static class listVertexForEdge_result implements org.apache.thrift.TBase<listVertexForEdge_result, listVertexForEdge_result._Fields>, java.io.Serializable, Cloneable, Comparable<listVertexForEdge_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listVertexForEdge_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listVertexForEdge_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listVertexForEdge_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listVertexForEdge_result.class, metaDataMap);
    }

    public listVertexForEdge_result() {
    }

    public listVertexForEdge_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listVertexForEdge_result(listVertexForEdge_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public listVertexForEdge_result deepCopy() {
      return new listVertexForEdge_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public listVertexForEdge_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listVertexForEdge_result)
        return this.equals((listVertexForEdge_result)that);
      return false;
    }

    public boolean equals(listVertexForEdge_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(listVertexForEdge_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listVertexForEdge_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listVertexForEdge_resultStandardSchemeFactory implements SchemeFactory {
      public listVertexForEdge_resultStandardScheme getScheme() {
        return new listVertexForEdge_resultStandardScheme();
      }
    }

    private static class listVertexForEdge_resultStandardScheme extends StandardScheme<listVertexForEdge_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listVertexForEdge_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listVertexForEdge_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listVertexForEdge_resultTupleSchemeFactory implements SchemeFactory {
      public listVertexForEdge_resultTupleScheme getScheme() {
        return new listVertexForEdge_resultTupleScheme();
      }
    }

    private static class listVertexForEdge_resultTupleScheme extends TupleScheme<listVertexForEdge_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listVertexForEdge_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listVertexForEdge_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class listEdgeForVertex_args implements org.apache.thrift.TBase<listEdgeForVertex_args, listEdgeForVertex_args._Fields>, java.io.Serializable, Cloneable, Comparable<listEdgeForVertex_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listEdgeForVertex_args");

    private static final org.apache.thrift.protocol.TField ID_VERTEX_FIELD_DESC = new org.apache.thrift.protocol.TField("idVertex", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listEdgeForVertex_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listEdgeForVertex_argsTupleSchemeFactory());
    }

    public int idVertex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID_VERTEX((short)1, "idVertex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID_VERTEX
            return ID_VERTEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __IDVERTEX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID_VERTEX, new org.apache.thrift.meta_data.FieldMetaData("idVertex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listEdgeForVertex_args.class, metaDataMap);
    }

    public listEdgeForVertex_args() {
    }

    public listEdgeForVertex_args(
      int idVertex)
    {
      this();
      this.idVertex = idVertex;
      setIdVertexIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listEdgeForVertex_args(listEdgeForVertex_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.idVertex = other.idVertex;
    }

    public listEdgeForVertex_args deepCopy() {
      return new listEdgeForVertex_args(this);
    }

    @Override
    public void clear() {
      setIdVertexIsSet(false);
      this.idVertex = 0;
    }

    public int getIdVertex() {
      return this.idVertex;
    }

    public listEdgeForVertex_args setIdVertex(int idVertex) {
      this.idVertex = idVertex;
      setIdVertexIsSet(true);
      return this;
    }

    public void unsetIdVertex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IDVERTEX_ISSET_ID);
    }

    /** Returns true if field idVertex is set (has been assigned a value) and false otherwise */
    public boolean isSetIdVertex() {
      return EncodingUtils.testBit(__isset_bitfield, __IDVERTEX_ISSET_ID);
    }

    public void setIdVertexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IDVERTEX_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID_VERTEX:
        if (value == null) {
          unsetIdVertex();
        } else {
          setIdVertex((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID_VERTEX:
        return Integer.valueOf(getIdVertex());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID_VERTEX:
        return isSetIdVertex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listEdgeForVertex_args)
        return this.equals((listEdgeForVertex_args)that);
      return false;
    }

    public boolean equals(listEdgeForVertex_args that) {
      if (that == null)
        return false;

      boolean this_present_idVertex = true;
      boolean that_present_idVertex = true;
      if (this_present_idVertex || that_present_idVertex) {
        if (!(this_present_idVertex && that_present_idVertex))
          return false;
        if (this.idVertex != that.idVertex)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(listEdgeForVertex_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIdVertex()).compareTo(other.isSetIdVertex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdVertex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idVertex, other.idVertex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listEdgeForVertex_args(");
      boolean first = true;

      sb.append("idVertex:");
      sb.append(this.idVertex);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listEdgeForVertex_argsStandardSchemeFactory implements SchemeFactory {
      public listEdgeForVertex_argsStandardScheme getScheme() {
        return new listEdgeForVertex_argsStandardScheme();
      }
    }

    private static class listEdgeForVertex_argsStandardScheme extends StandardScheme<listEdgeForVertex_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listEdgeForVertex_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID_VERTEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.idVertex = iprot.readI32();
                struct.setIdVertexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listEdgeForVertex_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_VERTEX_FIELD_DESC);
        oprot.writeI32(struct.idVertex);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listEdgeForVertex_argsTupleSchemeFactory implements SchemeFactory {
      public listEdgeForVertex_argsTupleScheme getScheme() {
        return new listEdgeForVertex_argsTupleScheme();
      }
    }

    private static class listEdgeForVertex_argsTupleScheme extends TupleScheme<listEdgeForVertex_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listEdgeForVertex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIdVertex()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIdVertex()) {
          oprot.writeI32(struct.idVertex);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listEdgeForVertex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.idVertex = iprot.readI32();
          struct.setIdVertexIsSet(true);
        }
      }
    }

  }

  public static class listEdgeForVertex_result implements org.apache.thrift.TBase<listEdgeForVertex_result, listEdgeForVertex_result._Fields>, java.io.Serializable, Cloneable, Comparable<listEdgeForVertex_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listEdgeForVertex_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listEdgeForVertex_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listEdgeForVertex_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listEdgeForVertex_result.class, metaDataMap);
    }

    public listEdgeForVertex_result() {
    }

    public listEdgeForVertex_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listEdgeForVertex_result(listEdgeForVertex_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public listEdgeForVertex_result deepCopy() {
      return new listEdgeForVertex_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public listEdgeForVertex_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listEdgeForVertex_result)
        return this.equals((listEdgeForVertex_result)that);
      return false;
    }

    public boolean equals(listEdgeForVertex_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(listEdgeForVertex_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listEdgeForVertex_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listEdgeForVertex_resultStandardSchemeFactory implements SchemeFactory {
      public listEdgeForVertex_resultStandardScheme getScheme() {
        return new listEdgeForVertex_resultStandardScheme();
      }
    }

    private static class listEdgeForVertex_resultStandardScheme extends StandardScheme<listEdgeForVertex_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listEdgeForVertex_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listEdgeForVertex_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listEdgeForVertex_resultTupleSchemeFactory implements SchemeFactory {
      public listEdgeForVertex_resultTupleScheme getScheme() {
        return new listEdgeForVertex_resultTupleScheme();
      }
    }

    private static class listEdgeForVertex_resultTupleScheme extends TupleScheme<listEdgeForVertex_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listEdgeForVertex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listEdgeForVertex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class listVertexForVertex_args implements org.apache.thrift.TBase<listVertexForVertex_args, listVertexForVertex_args._Fields>, java.io.Serializable, Cloneable, Comparable<listVertexForVertex_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listVertexForVertex_args");

    private static final org.apache.thrift.protocol.TField ID_VERTEX_FIELD_DESC = new org.apache.thrift.protocol.TField("idVertex", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listVertexForVertex_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listVertexForVertex_argsTupleSchemeFactory());
    }

    public int idVertex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID_VERTEX((short)1, "idVertex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID_VERTEX
            return ID_VERTEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __IDVERTEX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID_VERTEX, new org.apache.thrift.meta_data.FieldMetaData("idVertex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listVertexForVertex_args.class, metaDataMap);
    }

    public listVertexForVertex_args() {
    }

    public listVertexForVertex_args(
      int idVertex)
    {
      this();
      this.idVertex = idVertex;
      setIdVertexIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listVertexForVertex_args(listVertexForVertex_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.idVertex = other.idVertex;
    }

    public listVertexForVertex_args deepCopy() {
      return new listVertexForVertex_args(this);
    }

    @Override
    public void clear() {
      setIdVertexIsSet(false);
      this.idVertex = 0;
    }

    public int getIdVertex() {
      return this.idVertex;
    }

    public listVertexForVertex_args setIdVertex(int idVertex) {
      this.idVertex = idVertex;
      setIdVertexIsSet(true);
      return this;
    }

    public void unsetIdVertex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IDVERTEX_ISSET_ID);
    }

    /** Returns true if field idVertex is set (has been assigned a value) and false otherwise */
    public boolean isSetIdVertex() {
      return EncodingUtils.testBit(__isset_bitfield, __IDVERTEX_ISSET_ID);
    }

    public void setIdVertexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IDVERTEX_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID_VERTEX:
        if (value == null) {
          unsetIdVertex();
        } else {
          setIdVertex((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID_VERTEX:
        return Integer.valueOf(getIdVertex());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID_VERTEX:
        return isSetIdVertex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listVertexForVertex_args)
        return this.equals((listVertexForVertex_args)that);
      return false;
    }

    public boolean equals(listVertexForVertex_args that) {
      if (that == null)
        return false;

      boolean this_present_idVertex = true;
      boolean that_present_idVertex = true;
      if (this_present_idVertex || that_present_idVertex) {
        if (!(this_present_idVertex && that_present_idVertex))
          return false;
        if (this.idVertex != that.idVertex)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(listVertexForVertex_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIdVertex()).compareTo(other.isSetIdVertex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdVertex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idVertex, other.idVertex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listVertexForVertex_args(");
      boolean first = true;

      sb.append("idVertex:");
      sb.append(this.idVertex);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listVertexForVertex_argsStandardSchemeFactory implements SchemeFactory {
      public listVertexForVertex_argsStandardScheme getScheme() {
        return new listVertexForVertex_argsStandardScheme();
      }
    }

    private static class listVertexForVertex_argsStandardScheme extends StandardScheme<listVertexForVertex_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listVertexForVertex_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID_VERTEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.idVertex = iprot.readI32();
                struct.setIdVertexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listVertexForVertex_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_VERTEX_FIELD_DESC);
        oprot.writeI32(struct.idVertex);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listVertexForVertex_argsTupleSchemeFactory implements SchemeFactory {
      public listVertexForVertex_argsTupleScheme getScheme() {
        return new listVertexForVertex_argsTupleScheme();
      }
    }

    private static class listVertexForVertex_argsTupleScheme extends TupleScheme<listVertexForVertex_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listVertexForVertex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIdVertex()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIdVertex()) {
          oprot.writeI32(struct.idVertex);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listVertexForVertex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.idVertex = iprot.readI32();
          struct.setIdVertexIsSet(true);
        }
      }
    }

  }

  public static class listVertexForVertex_result implements org.apache.thrift.TBase<listVertexForVertex_result, listVertexForVertex_result._Fields>, java.io.Serializable, Cloneable, Comparable<listVertexForVertex_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listVertexForVertex_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listVertexForVertex_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listVertexForVertex_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listVertexForVertex_result.class, metaDataMap);
    }

    public listVertexForVertex_result() {
    }

    public listVertexForVertex_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listVertexForVertex_result(listVertexForVertex_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public listVertexForVertex_result deepCopy() {
      return new listVertexForVertex_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public listVertexForVertex_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listVertexForVertex_result)
        return this.equals((listVertexForVertex_result)that);
      return false;
    }

    public boolean equals(listVertexForVertex_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(listVertexForVertex_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listVertexForVertex_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listVertexForVertex_resultStandardSchemeFactory implements SchemeFactory {
      public listVertexForVertex_resultStandardScheme getScheme() {
        return new listVertexForVertex_resultStandardScheme();
      }
    }

    private static class listVertexForVertex_resultStandardScheme extends StandardScheme<listVertexForVertex_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listVertexForVertex_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listVertexForVertex_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listVertexForVertex_resultTupleSchemeFactory implements SchemeFactory {
      public listVertexForVertex_resultTupleScheme getScheme() {
        return new listVertexForVertex_resultTupleScheme();
      }
    }

    private static class listVertexForVertex_resultTupleScheme extends TupleScheme<listVertexForVertex_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listVertexForVertex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listVertexForVertex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
